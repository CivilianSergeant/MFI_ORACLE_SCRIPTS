CREATE OR REPLACE PACKAGE MFIDSK.DAY_END_PROCESS 
AS
 PROCEDURE UPDATE_DAILY_CHARGE(officeID NUMBER);
 PROCEDURE LOAN_BALANCE_TRANSFER_TO_SAVINGS(officeID NUMBER, instDate DATE,createUser VARCHAR,
 								orgID NUMBER);	
 PROCEDURE ADJUSTMENT(officeID NUMBER, orgID NUMBER, createUser VARCHAR);
 PROCEDURE ADD_LOAN_TRX(officeID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_LOAN_SUMMARY(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_LOAN_CORRECTION(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE INSERT_REGULAR_DISBURSEMENT(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_REGULAR_DISBURSEMENT_DATE(officeID NUMBER, orgID NUMBER, 
											businessDate DATE);
 PROCEDURE ADD_SAVING_TRX(officeID NUMBER, orgID NUMBER);
 PROCEDURE UPDATE_SAVING_SUMMARY_BALANCE(officeID NUMBER, orgID NUMBER);
 PROCEDURE UPDATE_LOAN_STATUS(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE ADD_LOAN_TRX_DUE(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_CENTER_COLLECTION_DATE(officeID NUMBER, businessDate DATE);
 -- Account Close Check Accounts Package
 PROCEDURE UPDATE_PROCESS_INFO(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_SAVING_SUMMARY_01_03(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_SAVING_SUMMARY_01_01(officeID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_SAVING_SUMMARY_01_02(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_SAVING_DROP_01_03(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_MEMBER_DROP_01_04(officeID NUMBER, orgID NUMBER, businessDate DATE);
 PROCEDURE UPDATE_LOAN_SUMMARY2(officeID NUMBER, businessDate DATE);
END DAY_END_PROCESS;

CREATE OR REPLACE PACKAGE BODY MFIDSK.DAY_END_PROCESS
AS
/**
 * Author Himel
 * ALL Procedure to execute DAY END PROCESS
 */
PROCEDURE UPDATE_DAILY_CHARGE(officeID IN NUMBER)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_DAILY_CHARGE]:';
BEGIN
	
	--Fix Loan Due Problem
	MERGE INTO DAILY_LOAN_TRX t 
	USING (
		SELECT MAX(r.DAILY_LOAN_TRX_ID) DAILY_LOAN_TRX_ID,r.LOAN_SUMMARY_ID,r.OFFICE_ID,
		r.TRX_DATE, COUNT(*) cnt
		FROM DAILY_LOAN_TRX r
		WHERE r.OFFICE_ID=officeID AND r.LOAN_DUE > 0
    	GROUP By r.LOAN_SUMMARY_ID, r.TRX_DATE,r.OFFICE_ID
    	HAVING COUNT(*) > 1
	) s
	ON (t.DAILY_LOAN_TRX_ID = s.DAILY_LOAN_TRX_ID)
	WHEN MATCHED THEN
	UPDATE SET t.LOAN_DUE=0;

	--Fix Int Due Problem
	MERGE INTO DAILY_LOAN_TRX t
	USING (
		SELECT MAX(r.DAILY_LOAN_TRX_ID) DAILY_LOAN_TRX_ID,r.LOAN_SUMMARY_ID,
		r.OFFICE_ID, r.TRX_DATE, COUNT(*) cnt
		FROM DAILY_LOAN_TRX r
		WHERE r.OFFICE_ID=officeID 
		AND
		--r.TrxType In (10,20,31) AND 
		r.INT_DUE>0
		GROUP By r.LOAN_SUMMARY_ID, r.TRX_DATE,r.OFFICE_ID
		HAVING COUNT(*) > 1
	) s
	ON (t.DAILY_LOAN_TRX_ID = s.DAILY_LOAN_TRX_ID)
	WHEN MATCHED THEN
	Update SET t.INT_DUE=0;

	--Fix Charge Problem
	MERGE INTO DAILY_LOAN_TRX t
		USING (
		SELECT MAX(r.DAILY_LOAN_TRX_ID) DAILY_LOAN_TRX_ID,r.LOAN_SUMMARY_ID,
		r.OFFICE_ID, r.TRX_DATE, COUNT(*) cnt
		FROM DAILY_LOAN_TRX r
		WHERE r.INT_CHARGE>0 and
		r.OFFICE_ID=officeID
		AND r.TRX_TYPE <>41
		GROUP By r.LOAN_SUMMARY_ID, r.TRX_DATE,r.OFFICE_ID
    	HAVING COUNT(*) > 1
		) s
		ON (t.DAILY_LOAN_TRX_ID = s.DAILY_LOAN_TRX_ID)
		WHEN MATCHED THEN
		Update SET t.INT_CHARGE=0;
	
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);
		
END;


PROCEDURE LOAN_BALANCE_TRANSFER_TO_SAVINGS(officeID IN NUMBER, instDate IN DATE,
				createUser IN VARCHAR,	orgID IN NUMBER)
IS
trxType int :=32;
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [LOAN_BALANCE_TRANSFER_TO_SAVINGS]:';
BEGIN
	DELETE FROM DAILY_SAVING_TRX WHERE OFFICE_ID=officeID AND TRANS_TYPE=trxType;
	DELETE FROM DAILY_LOAN_TRX d WHERE d.OFFICE_ID=officeID AND d.TRX_TYPE=trxType;

	-- 01.01 --
	INSERT INTO SAVING_SUMMARY (OFFICE_ID,MEMBER_ID,PRODUCT_ID,CENTER_ID,NO_OF_ACCOUNT,TRANSACTION_DATE,
	DEPOSIT,WITHDRAWAL,BALANCE,INTEREST_RATE,SAVING_INSTALLMENT,CUM_INTEREST,MONTHLY_INTEREST,
	PENALTY,OPENING_DATE,MATURED_DATE,CLOSING_DATE,TRANS_TYPE,SAVING_STATUS,EMPLOYEE_ID,
	MEMBER_CATEGORY_ID,POSTED,ORGANIZATION_ID,IS_ACTIVE,INACTIVE_DATE,CREATE_USER,CREATE_DATE,CUR_DEPOSIT,
	CUR_WITHDRAWAL,CUR_INTEREST,CUR_PENALTY,DURATION,INSTALLMENT_NO,LATE_FEE,SAVING_ACCOUNT_NO)
	SELECT l.OFFICE_ID,m.MEMBER_ID,p.PRODUCT_ID,m.CENTER_ID,2 as NO_OF_ACCOUNT,
	instDate as TRANSACTION_DATE,0 as DEPOSIT,0 as WITHDRAWAL,0 as BALANCE
	,p.INTEREST_RATE,0 as SAVING_INSTALLMENT,0 as CUM_INTEREST,0 as MONTHLY_INTEREST,0 as PENALTY,
	instDate  as OPENING_DATE,null as MATURED_DATE,null as CLOSING_DATE
	,0 as TRANS_TYPE,1 as SAVING_STATUS,l.EMPLOYEE_ID,m.MEMBER_CATEGORY_ID,1 as POSTED,
	m.ORGANIZATION_ID,1 as IS_ACTIVE,null as INACTIVE_DATE,createUser as CREATE_USER
	,sysdate CREATE_DATE,0 as CUR_DEPOSIT,0 as CUR_WITHDRAWAL,0 as CUR_INTEREST,0 as CUR_PENALTY,
	0 as DURATION,0 as INSTALLMENT_NO,0 as LATE_FEE,0 as SAVING_ACCOUNT_NO
	FROM (
			SELECT l.LOAN_SUMMARY_ID, l.OFFICE_ID,l.CENTER_ID,l.MEMBER_ID,l.PRODUCT_ID,
					l.PURPOSE_ID,l.LOAN_TERM,l.EMPLOYEE_ID,
					(l.PRINCIPAL_LOAN+ROUND(l.INT_CHARGE+d.INT_CHARGE,0)-l.LOAN_REPAID-l.INT_PAID-d.LOAN_PAID-d.INT_PAID) AS AMOUNT
					FROM LOAN_SUMMARY l INNER JOIN (
					SELECT dlc.LOAN_SUMMARY_ID,SUM(dlc.CUM_INT_CHARGE) CUM_INT_CHARGE ,
					SUM( dlc.INT_CHARGE) INT_CHARGE,
					SUM(dlc.INT_PAID) INT_PAID,SUM(dlc.LOAN_PAID) LOAN_PAID
					 FROM DAILY_LOAN_TRX  dlc 
					WHERE OFFICE_ID=officeID
					AND dlc.TRX_TYPE<>trxType
					GROUP BY dlc.LOAN_SUMMARY_ID
					) d ON l.LOAN_SUMMARY_ID=d.LOAN_SUMMARY_ID WHERE l.OFFICE_ID=officeID
					AND (l.LOAN_REPAID+l.INT_PAID+d.LOAN_PAID+d.INT_PAID-l.PRINCIPAL_LOAN-ROUND(l.INT_CHARGE+d.INT_CHARGE,0)>=1.00)
		) l
		INNER JOIN MEMBERS m ON l.OFFICE_ID=m.OFFICE_ID AND l.MEMBER_ID=m.MEMBER_ID
		INNER JOIN MEMBER_CATEGORIES mc ON m.MEMBER_CATEGORY_ID=mc.MEMBER_CATEGORY_ID
		INNER JOIN PRODUCTS p ON mc.CATEGORY_SHORT_NAME_BNG=p.PRODUCT_CODE
		LEFT JOIN (
			SELECT s.* FROM SAVING_SUMMARY s INNER JOIN PRODUCTS p ON s.PRODUCT_ID=p.PRODUCT_ID
				WHERE s.IS_ACTIVE=1 AND s.OFFICE_ID=officeID AND SUBSTR(p.PRODUCT_CODE,0,2)='21' 
				AND s.SAVING_STATUS=1
		) s ON l.OFFICE_ID=s.OFFICE_ID AND l.MEMBER_ID=s.MEMBER_ID
		WHERE s.MEMBER_ID IS NULL;
	
	--01.02--
	INSERT INTO DAILY_SAVING_TRX (SAVING_SUMMARY_ID,OFFICE_ID,MEMBER_ID,PRODUCT_ID,CENTER_ID,
	NO_OF_ACCOUNT,TRANSACTION_DATE,DUE_SAVING_INSTALLMENT,SAVING_INSTALLMENT,DEPOSIT,
	WITHDRAWAL,BALANCE,PENALTY,TRANS_TYPE,MONTHLY_INTEREST,PRESENCE_IND,TRANSFER_DEPOSIT,
	TRANSFER_WITHDRAWAL,MEMBER_CODE,MEMBER_NAME,EMPLOYEE_ID,MEMBER_CATEGORY_ID
	,PRODUCT_CODE,PRODUCT_NAME,CREATE_USER,CREATE_DATE,ORGANIZATION_ID) 
	SELECT s.SAVING_SUMMARY_ID,s.OFFICE_ID,s.MEMBER_ID,s.PRODUCT_ID,s.CENTER_ID,
	s.NO_OF_ACCOUNT,instDate as TRANSACTION_DATE,0 as DUE_SAVING_INSTALLMENT,
	ABS(l.AMOUNT) as SAVING_INSTALLMENT,0 as DEPOSIT,0 as WITHDRAWAL,0 as BALANCE,0 as PENALTY,
	trxType as TRANS_TYPE,0 as MONTHLY_INTEREST,0 as PRESENCE_IND,0 as TRANSFER_DEPOSIT,0 as TRANSFER_WITHDRAWAL,
	m.MEMBER_CODE,NVL(m.FIRST_NAME,'')||''||NVL(m.MIDDLE_NAME,'')||''||NVL(m.LAST_NAME,'') as MEMBER_NAME,
	s.EMPLOYEE_ID,s.MEMBER_CATEGORY_ID,s.PRODUCT_CODE,s.PRODUCT_NAME,createUser as CREATE_USER,
	SYSDATE as CREATE_DATE,s.ORGANIZATION_ID
	From (
		SELECT l.LOAN_SUMMARY_ID, l.OFFICE_ID,l.CENTER_ID,l.MEMBER_ID,l.PRODUCT_ID,
				l.PURPOSE_ID,l.LOAN_TERM,
				(l.PRINCIPAL_LOAN+Round(l.INT_CHARGE+d.INT_CHARGE,0)-l.LOAN_REPAID-l.INT_PAID-d.LOAN_PAID-d.INT_PAID) as AMOUNT
				FROM LOAN_SUMMARY l INNER JOIN (
				SELECT dlc.LOAN_SUMMARY_ID,
				SUM(dlc.CUM_INT_CHARGE) CUM_INT_CHARGE ,
				SUM( dlc.INT_CHARGE) INT_CHARGE,
				SUM(dlc.INT_PAID) INT_PAID,
				SUM(dlc.LOAN_PAID) LOAN_PAID
				 FROM DAILY_LOAN_TRX  dlc 
				WHERE dlc.OFFICE_ID=officeID 
				AND dlc.TRX_TYPE <>trxType
				GROUP BY dlc.LOAN_SUMMARY_ID
				) d ON l.LOAN_SUMMARY_ID=d.LOAN_SUMMARY_ID WHERE l.OFFICE_ID=officeID
				AND (l.LOAN_REPAID+l.INT_PAID+d.LOAN_PAID+d.INT_PAID-l.PRINCIPAL_LOAN-ROUND(l.INT_CHARGE+d.INT_CHARGE,0)>=1.00)
		) l
		INNER JOIN MEMBERS m ON l.OFFICE_ID=m.OFFICE_ID AND l.MEMBER_ID=m.MEMBER_ID
		INNER JOIN (
					SELECT s.*,p.PRODUCT_CODE,p.PRODUCT_NAME FROM SAVING_SUMMARY s 
						INNER JOIN PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
						WHERE s.IS_ACTIVE=1 AND s.OFFICE_ID=officeID
						AND SUBSTR(p.PRODUCT_CODE,0,2)='21' AND s.SAVING_STATUS=1
		) s ON l.OFFICE_ID=s.OFFICE_ID AND l.MEMBER_ID=s.MEMBER_ID;
	
	
		--01.03--
		INSERT INTO DAILY_LOAN_TRX (TRX_DATE,LOAN_SUMMARY_ID,OFFICE_ID,MEMBER_ID,PRODUCT_ID,CENTER_ID,
		MEMBER_CATEGORY_ID,LOAN_TERM,PURPOSE_ID,INSTALLMENT_DATE,PRINCIPAL_LOAN,LOAN_REPAID,
		LOAN_DUE,LOAN_PAID,CUM_INT_CHARGE,INT_CHARGE,INT_DUE,INT_PAID,ADVANCE,DUE_RECOVERY,TRX_TYPE,
		INSTALLMENT_NO,EMPLOYEE_ID, MEMBER_CODE,MEMBER_NAME,PRODUCT_CODE,PRODUCT_NAME,
		INTEREST_CALCULATION_METHOD,INVESTOR_ID,CREATE_USER,CREATE_DATE,LOAN_NO,ORGANIZATION_ID,DURATION,
		DURATION_OVER_LOAN_DUE,DURATION_OVER_INT_DUE)
		SELECT instDate as TRX_DATE,l.LOAN_SUMMARY_ID,l.OFFICE_ID,
		l.MEMBER_ID,l.PRODUCT_ID,l.CENTER_ID,l.MEMBER_CATEGORY_ID,l.LOAN_TERM,l.PURPOSE_ID,
		instDate as INSTALLMENT_DATE, 0 as PRINCIPAL_LOAN,
		0 as LOAN_REPAID,0 as LOAN_DUE,0 as LOAN_PAID,0 as CUM_INT_CHARGE,0 as INT_CHARGE,
		0 as INT_DUE,l.AMOUNT as INT_PAID,0 as ADVANCE,0 as DUE_RECOVERY, trxType as TRX_TYPE,
		l.INSTALLMENT_NO,l.EMPLOYEE_ID,m.MEMBER_CODE,
		NVL(m.FIRST_NAME,'')||''||NVL(m.MIDDLE_NAME,'')||''||NVL(m.LAST_NAME,'') as MEMBER_NAME,
		p.PRODUCT_CODE,p.PRODUCT_NAME,p.INTEREST_CALCULATION_METHOD,l.INVESTOR_ID,
		createUser as CREATE_USER,SYSDATE as CREATE_DATE,l.LOAN_NO,l.ORGANIZATION_ID
		,l.DURATION,0 as DURATION_OVER_LOAN_DUE,0 as DURATION_OVER_INT_DUE
		From (
				SELECT l.LOAN_SUMMARY_ID, l.OFFICE_ID,l.CENTER_ID,l.MEMBER_ID,l.PRODUCT_ID,
				l.PURPOSE_ID,l.LOAN_TERM,l.MEMBER_CATEGORY_ID,l.INSTALLMENT_NO,
				l.EMPLOYEE_ID,l.LOAN_NO,l.INVESTOR_ID,l.DURATION,l.ORGANIZATION_ID,
				(l.PRINCIPAL_LOAN+ROUND(l.INT_CHARGE+d.INT_CHARGE,0)-l.LOAN_REPAID-l.INT_PAID-d.LOAN_PAID-d.INT_PAID) as AMOUNT
				FROM LOAN_SUMMARY l 
				INNER JOIN (
				SELECT dlc.LOAN_SUMMARY_ID,SUM(dlc.CUM_INT_CHARGE) CUM_INT_CHARGE,
				SUM( dlc.INT_CHARGE) INT_CHARGE,
				SUM(dlc.INT_PAID) INT_PAID,SUM(dlc.LOAN_PAID) LOAN_PAID
				 FROM DAILY_LOAN_TRX  dlc 
				WHERE dlc.OFFICE_ID=officeID  
				AND dlc.TRX_TYPE<>trxType
				GROUP BY dlc.LOAN_SUMMARY_ID
				) d ON l.LOAN_SUMMARY_ID=d.LOAN_SUMMARY_ID where l.OFFICE_ID=officeID
				and (l.LOAN_REPAID+l.INT_PAID+d.LOAN_PAID+d.INT_PAID-l.PRINCIPAL_LOAN-ROUND(l.INT_CHARGE+d.INT_CHARGE,0)>=1.00)
			) l
			INNER JOIN MEMBERS m ON l.OFFICE_ID=m.OFFICE_ID AND l.MEMBER_ID=m.MEMBER_ID
			INNER JOIN PRODUCTS p ON l.PRODUCT_ID=p.PRODUCT_ID;

		
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;
 								
PROCEDURE ADJUSTMENT(officeID IN NUMBER,orgID IN NUMBER, createUser IN VARCHAR)
IS
insDate DATE;
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [ADJUSTMENT]:';
BEGIN
	
	SELECT INSTALLMENT_DATE 
	INTO insDate 
	FROM DAILY_LOAN_TRX WHERE OFFICE_ID=officeID
	FETCH FIRST 1 ROW ONLY;

	-- Proc_UpdateDailyCharge(officeID)
	DAY_END_PROCESS.UPDATE_DAILY_CHARGE(officeID);
	
	DELETE FROM DAILY_LOAN_TRX WHERE TRX_TYPE IN(50,0) AND OFFICE_ID=officeID;
	DELETE FROM DAILY_SAVING_TRX WHERE TRANS_TYPE=0 AND OFFICE_ID=officeID;

	INSERT INTO DAILY_LOAN_TRX(LOAN_SUMMARY_ID,OFFICE_ID,CENTER_ID,PRODUCT_ID,
		MEMBER_ID,LOAN_TERM,LOAN_PAID,INT_PAID,TRX_DATE,INSTALLMENT_NO,
		INSTALLMENT_DATE,MEMBER_CATEGORY_ID,PURPOSE_ID,EMPLOYEE_ID,INVESTOR_ID,
		TRX_TYPE,PRODUCT_CODE,MEMBER_CODE,MEMBER_NAME,ORGANIZATION_ID
		)
		SELECT l.LOAN_SUMMARY_ID,l.OFFICE_ID,l.CENTER_ID,l.PRODUCT_ID,
		l.MEMBER_ID,l.LOAN_TERM,
		CASE WHEN (l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)<0 THEN
			(l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)
		ELSE 0 END as LOAN_PAID,
		CASE WHEN (l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)<0 THEN 
			(l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)*(-1)
		ELSE 0 END as INT_PAID,
		e.TRX_DATE,e.INSTALLMENT_NO,e.INSTALLMENT_DATE,l.MEMBER_CATEGORY_ID,
		l.PURPOSE_ID,l.EMPLOYEE_ID,l.INVESTOR_ID,50 AS TRX_TYPE,e.PRODUCT_CODE,
		e.MEMBER_CODE,e.MEMBER_NAME,l.ORGANIZATION_ID
		FROM LOAN_SUMMARY l INNER JOIN (
		SELECT dlt.OFFICE_ID,dlt.MEMBER_ID,dlt.LOAN_SUMMARY_ID,dlt.TRX_DATE,
		dlt.INSTALLMENT_DATE,
		MAX(dlt.INSTALLMENT_NO) as INSTALLMENT_NO,
		SUM(dlt.INT_CHARGE) INT_CHARGE,sum(dlt.LOAN_PAID) as LOAN_PAID,
		SUM(dlt.INT_PAID) as INT_PAID,dlt.PRODUCT_CODE,dlt.MEMBER_CODE,
		MAX(dlt.MEMBER_NAME) as MEMBER_NAME 
		FROM DAILY_LOAN_TRX dlt
		 WHERE dlt.OFFICE_ID=officeID-- And MemberID=70
		GROUP BY OFFICE_ID,MEMBER_ID,LOAN_SUMMARY_ID,TRX_DATE,INSTALLMENT_DATE,
		PRODUCT_CODE,MEMBER_CODE
		) e ON l.OFFICE_ID=e.OFFICE_ID AND l.MEMBER_ID=e.MEMBER_ID 
		AND l.LOAN_SUMMARY_ID=e.LOAN_SUMMARY_ID
		AND (l.PRINCIPAL_LOAN+l.INT_CHARGE+e.INT_CHARGE-l.LOAN_REPAID-l.INT_PAID-e.LOAN_PAID-e.INT_PAID)<0.5
		AND l.OFFICE_ID=officeID AND (CASE WHEN (l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)<0 THEN
			(l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)
		else 0 end)<>0;
	
	
	INSERT INTO DAILY_LOAN_TRX(LOAN_SUMMARY_ID,OFFICE_ID,CENTER_ID,PRODUCT_ID,
		MEMBER_ID,LOAN_TERM,LOAN_PAID,INT_PAID,TRX_DATE,INSTALLMENT_NO,INSTALLMENT_DATE,
		MEMBER_CATEGORY_ID,PURPOSE_ID,EMPLOYEE_ID,INVESTOR_ID,TRX_TYPE,
		PRODUCT_CODE,MEMBER_CODE,MEMBER_NAME,ORGANIZATION_ID)
		SELECT l.LOAN_SUMMARY_ID,l.OFFICE_ID,l.CENTER_ID,l.PRODUCT_ID,l.MEMBER_ID,l.LOAN_TERM,
		CASE WHEN (l.INT_CHARGE+e.INT_CHARGE-l.INT_PAID-e.INT_PAID)<0.5 
		AND (l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)>0 
		THEN (l.LOAN_REPAID+e.LOAN_PAID-l.PRINCIPAL_LOAN)*(-1)
		ELSE 0 END as LOAN_PAID,
		CASE WHEN (l.INT_CHARGE+e.INT_CHARGE-l.INT_PAID-e.INT_PAID)<0.5 
		AND (l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)>0 THEN 
			(l.LOAN_REPAID+e.LOAN_PAID-l.PRINCIPAL_LOAN)
		ELSE 0 END as INT_PAID,e.TRX_DATE,e.INSTALLMENT_NO,e.INSTALLMENT_DATE,
		l.MEMBER_CATEGORY_ID,l.PURPOSE_ID,l.EMPLOYEE_ID,l.INVESTOR_ID,50 TRX_TYPE,
		e.PRODUCT_CODE,e.MEMBER_CODE,e.MEMBER_NAME,l.ORGANIZATION_ID
		FROM LOAN_SUMMARY l INNER JOIN (
		SELECT dlt.OFFICE_ID,dlt.MEMBER_ID,dlt.LOAN_SUMMARY_ID,dlt.TRX_DATE,dlt.INSTALLMENT_DATE,
		MAX(dlt.INSTALLMENT_NO) AS INSTALLMENT_NO,
		SUM(dlt.INT_CHARGE) AS INT_CHARGE,
		SUM(dlt.LOAN_PAID) AS LOAN_PAID,
		SUM(dlt.INT_PAID) AS INT_PAID,
		dlt.PRODUCT_CODE,dlt.MEMBER_CODE,Max(dlt.MEMBER_NAME) AS MEMBER_NAME 
		FROM DAILY_LOAN_TRX dlt WHERE dlt.OFFICE_ID=officeID
		GROUP BY OFFICE_ID,MEMBER_ID,LOAN_SUMMARY_ID,TRX_DATE,INSTALLMENT_DATE,PRODUCT_CODE,MEMBER_CODE
		) e ON l.OFFICE_ID=e.OFFICE_ID and l.MEMBER_ID=e.MEMBER_ID and l.LOAN_SUMMARY_ID=e.LOAN_SUMMARY_ID
		AND (l.PRINCIPAL_LOAN+l.INT_CHARGE+e.INT_CHARGE-l.LOAN_REPAID-l.INT_PAID-e.LOAN_PAID-e.INT_PAID)<0.5
		AND l.OFFICE_ID=officeID
		AND (CASE WHEN (l.INT_CHARGE+e.INT_CHARGE-l.INT_PAID-e.INT_PAID)<0.5 
		AND (l.PRINCIPAL_LOAN-l.LOAN_REPAID-e.LOAN_PAID)>0 
		THEN (l.INT_CHARGE+e.INT_CHARGE-l.INT_PAID-e.INT_PAID)*(-1)
		ELSE 0 END)<>0;
	
--Over LoanPaid from Principal Amount--
	INSERT INTO DAILY_LOAN_TRX(LOAN_SUMMARY_ID,OFFICE_ID,CENTER_ID,PRODUCT_ID,
		MEMBER_ID,LOAN_TERM,LOAN_PAID,INT_PAID,TRX_DATE,INSTALLMENT_NO,INSTALLMENT_DATE,
		MEMBER_CATEGORY_ID,PURPOSE_ID,EMPLOYEE_ID,INVESTOR_ID,TRX_TYPE,
		PRODUCT_CODE,MEMBER_CODE,MEMBER_NAME,ORGANIZATION_ID)
		SELECT r.LOAN_SUMMARY_ID,r.OFFICE_ID,r.CENTER_ID,r.PRODUCT_ID,r.MEMBER_ID,
		r.LOAN_TERM,r.LOAN_BAL_FINAL as LOAN_PAID,r.LOAN_BAL_FINAL*(-1) as INT_PAID,
		insDate as TRX_DATE,r.INSTALLMENT_NO,
		insDate as INSTALLMENT_DATE,
		r.MEMBER_CATEGORY_ID,r.PURPOSE_ID,r.EMPLOYEE_ID,r.INVESTOR_ID,50 as TRX_TYPE,
		r.PRODUCT_CODE,r.MEMBER_CODE,r.MEMBER_NAME,r.ORGANIZATION_ID
		--,IntChargeD,LoanPaidD,IntPaidD 
		FROM(
		SELECT lsmp.*,(lsmp.PRINCIPAL_LOAN)-(lsmp.LOAN_PAID+NVL(dlt.LOAN_PAID,0)) as LOAN_BAL_FINAL,
		NVL(dlt.INT_CHARGE,0) as INT_CHARGE_D,
		NVL(dlt.LOAN_PAID,0) as LOAN_PAID_D,
		NVL(dlt.INT_PAID,0) as INT_PAID_D 
		FROM (
		---------PrincipalBalance_Diff--------LoanSummary------------
		SELECT ls.OFFICE_ID,ls.MEMBER_ID,ls.LOAN_SUMMARY_ID,ls.PRODUCT_ID,
		(ls.PRINCIPAL_LOAN) PRINCIPAL_LOAN
		,(ls.LOAN_REPAID) LOAN_PAID,(ls.INT_CHARGE) INT_CHARGE,(ls.INT_PAID) INT_PAID,
		(ls.INT_CHARGE-ls.INT_PAID) INT_BAL,
		(ls.PRINCIPAL_LOAN+ls.INT_CHARGE-ls.INT_PAID-ls.LOAN_REPAID) BALANCE,
		(ls.PRINCIPAL_LOAN-ls.LOAN_REPAID) LOAN_BAL,ls.LOAN_STATUS
		,ls.INSTALLMENT_NO,ls.CENTER_ID,ls.LOAN_TERM,ls.MEMBER_CATEGORY_ID,ls.PURPOSE_ID,
		ls.EMPLOYEE_ID,ls.INVESTOR_ID,p.PRODUCT_CODE,m.MEMBER_CODE
		,NVL(m.FIRST_NAME,'')||' '||NVL(m.MIDDLE_NAME,'')||' '||NVL(m.LAST_NAME,'') as MEMBER_NAME,
		ls.ORGANIZATION_ID
		FROM LOAN_SUMMARY ls 
		INNER JOIN MEMBERS m ON ls.MEMBER_ID=m.MEMBER_ID
		INNER JOIN PRODUCTS p ON ls.PRODUCT_ID=p.PRODUCT_ID
		WHERE ls.OFFICE_ID=officeID AND SUBSTR(p.PRODUCT_CODE,0,1)<>'7' AND ls.IS_ACTIVE=1 
		AND ls.LOAN_STATUS=1
		--AND ((s.PrincipalLoan)-(s.LoanRePaid))<0
		-------------------------DailyLoanTrx----------------------
		) lsmp
		LEFT JOIN (SELECT OFFICE_ID,MEMBER_ID,LOAN_SUMMARY_ID,
		SUM(INT_CHARGE) INT_CHARGE,SUM(LOAN_PAID) as LOAN_PAID,SUM(INT_PAID) as INT_PAID
		FROM DAILY_LOAN_TRX
		WHERE OFFICE_ID=officeID
		GROUP BY OFFICE_ID,MEMBER_ID,LOAN_SUMMARY_ID
		) dlt ON lsmp.OFFICE_ID=dlt.OFFICE_ID AND lsmp.LOAN_SUMMARY_ID=dlt.LOAN_SUMMARY_ID
		WHERE ((lsmp.PRINCIPAL_LOAN)-(lsmp.LOAN_PAID+NVL(dlt.LOAN_PAID,0)))<0
		) r

	-----------------------------------Excess Interest Check---
	IF (orgID<>12) THEN
		
		INSERT INTO DAILY_LOAN_TRX(
		LOAN_SUMMARY_ID,OFFICE_ID,CENTER_ID,PRODUCT_ID,MEMBER_ID,LOAN_TERM,
		LOAN_PAID,INT_PAID,TRX_DATE,INSTALLMENT_NO,INSTALLMENT_DATE,
		MEMBER_CATEGORY_ID,PURPOSE_ID,EMPLOYEE_ID,INVESTOR_ID,TRX_TYPE,
		PRODUCT_CODE,MEMBER_CODE,MEMBER_NAME,ORGANIZATION_ID)
		SELECT dt.LOAN_SUMMARY_ID,dt.OFFICE_ID,ls.CENTER_ID,dt.PRODUCT_ID,ls.MEMBER_ID,ls.LOAN_TERM,
		ROUND(CASE WHEN (ls.PRINCIPAL_LOAN-ls.LOAN_REPAID-dt.LOAN_PAID_D)>=(ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D) 
			THEN (ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D) 
			ELSE (ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D)-(ls.PRINCIPAL_LOAN-ls.LOAN_REPAID-dt.LOAN_PAID_D) 
			END,0) as LOAN_PAID,
		ROUND((CASE WHEN (ls.PRINCIPAL_LOAN-ls.LOAN_REPAID-dt.LOAN_PAID_D)>=(ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D) 
			THEN (ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D) 
			ELSE (ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D)-(ls.PRINCIPAL_LOAN-ls.LOAN_REPAID-dt.LOAN_PAID_D) end)*(-1),0) as INT_PAID,
		dt.INSTALLMENT_DATE TRX_DATE,dt.INSTALLMENT_NO,dt.INSTALLMENT_DATE,ls.MEMBER_CATEGORY_ID,ls.PURPOSE_ID,
		ls.EMPLOYEE_ID,ls.INVESTOR_ID,50 TRX_TYPE,dt.PRODUCT_CODE,dt.MEMBER_CODE,dt.MEMBER_NAME,dt.ORGANIZATION_ID 
		FROM (SELECT d.OFFICE_ID,d.LOAN_SUMMARY_ID,SUM(d.LOAN_PAID) as LOAN_PAID_D,
		SUM(d.INT_CHARGE) as INT_CHARGE_D,SUM(d.INT_PAID) as INT_PAID_D,d.INSTALLMENT_DATE, 
		MAX(d.INSTALLMENT_NO) as INSTALLMENT_NO,SUM(d.INT_DUE) as INT_DUE_D,
		d.PRODUCT_ID,d.PRODUCT_CODE,d.MEMBER_CODE,MAX(d.MEMBER_NAME) as MEMBER_NAME,d.ORGANIZATION_ID
		FROM DAILY_LOAN_TRX d
			WHERE d.OFFICE_ID=officeID
			GROUP BY d.OFFICE_ID,d.LOAN_SUMMARY_ID,d.INSTALLMENT_DATE,d.PRODUCT_ID,d.PRODUCT_CODE,d.MEMBER_CODE,d.ORGANIZATION_ID
		) dt
		INNER JOIN LOAN_SUMMARY ls ON ls.LOAN_SUMMARY_ID = dt.LOAN_SUMMARY_ID AND ls.OFFICE_ID = dt.OFFICE_ID
		INNER JOIN PRODUCTS p ON p.PRODUCT_ID = dt.PRODUCT_ID
		WHERE (ls.PRINCIPAL_LOAN+ls.INT_CHARGE+dt.INT_CHARGE_D-ls.INT_PAID-dt.INT_PAID_D-ls.LOAN_REPAID-dt.LOAN_PAID_D) >= 0.5
		AND (ls.INT_PAID+dt.INT_PAID_D)-(ls.INT_CHARGE+dt.INT_CHARGE_D) >= 1.0
		AND  (ls.INT_PAID+dt.INT_PAID_D)-(NVL(ls.CUM_INT_DUE,0)+dt.INT_DUE_D) >= 1.0
		AND p.INTEREST_CALCULATION_METHOD <> 'D'
		
	END IF;

----------------Excess Int Paid Transfer to Savings------------------------
	IF (orgID=4) THEN

	 DAY_END_PROCESS.LOAN_BALANCE_TRANSFER_TO_SAVINGS(officeID,insDate,createUser,orgID);

	END IF;

	MERGE INTO ACC_TRX_DETAIL t
	USING (
	SELECT d.TRX_DETAILS_ID
	FROM ACC_TRX_DETAIL d 
	INNER JOIN ACC_TRX_MASTER m ON m.TRX_MASTER_ID=d.TRX_MASTER_ID
	WHERE d.IS_ACTIVE = 1
	AND m.IS_ACTIVE = 0
	AND m.OFFICE_ID=officeID) s
	ON (t.TRX_DETAILS_ID = s.TRX_DETAILS_ID)
	WHEN MATCHED THEN
	UPDATE SET t.IS_ACTIVE=0 ,t.INACTIVE_DATE=SYSDATE;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE ADD_LOAN_TRX(officeID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [ADD_LOAN_TRX]:';
BEGIN
	
	INSERT INTO LOAN_TRX(
	 		TRX_DATE,LOAN_SUMMARY_ID,OFFICE_ID,
	 		CENTER_ID,MEMBER_ID,PRODUCT_ID,LOAN_TERM,
	 		LOAN_PAID,LOAN_DUE,INT_DUE,INT_CHARGE,
			INT_PAID,TRX_TYPE,INSTALLMENT_NO,ADVANCE,DUE_RECOVERY,
			MEMBER_CATEGORY_ID,EMPLOYEE_ID,INSTALLMENT_DATE,
			INVESTOR_ID,CREATE_USER,CREATE_DATE,ORGANIZATION_ID
			)
			SELECT dlt.TRX_DATE,dlt.LOAN_SUMMARY_ID,dlt.OFFICE_ID,dlt.CENTER_ID,
			dlt.MEMBER_ID,dlt.PRODUCT_ID,dlt.LOAN_TERM,
			dlt.LOAN_PAID,dlt.LOAN_DUE,dlt.INT_DUE,
			(CASE WHEN p.INTEREST_CALCULATION_METHOD='F' THEN 0 ELSE  dlt.INT_CHARGE END) INT_CHARGE,
			dlt.INT_PAID,dlt.TRX_TYPE,dlt.INSTALLMENT_NO,dlt.ADVANCE,dlt.DUE_RECOVERY,
			dlt.MEMBER_CATEGORY_ID,dlt.EMPLOYEE_ID,businessDate,dlt.INVESTOR_ID,
			dlt.CREATE_USER,SYSDATE,dlt.ORGANIZATION_ID 
			FROM DAILY_LOAN_TRX dlt 
			INNER JOIN PRODUCTS p ON dlt.PRODUCT_ID=p.PRODUCT_ID
			WHERE dlt.OFFICE_ID=officeID;
		
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);	

END;
/**
 * Author: Himel
 * Update Loan Summary Without Correction
 */
PROCEDURE UPDATE_LOAN_SUMMARY(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_LOAN_SUMMARY]:';
BEGIN
	
	MERGE INTO LOAN_SUMMARY l
	USING (
			SELECT ls.LOAN_SUMMARY_ID,ls.LOAN_REPAID,
			   (ls.LOAN_REPAID+sdlt.LOAN_PAID)	s_loan_repaid,
			   ls.INT_PAID,
			   (ls.INT_PAID + sdlt.INT_PAID) s_int_paid,
			   ls.INT_CHARGE,
			   (CASE WHEN p.INTEREST_CALCULATION_METHOD='F' 
					THEN ls.INT_CHARGE ELSE ( ls.INT_CHARGE + sdlt.INT_CHARGE) END) s_int_charge,
				ls.INSTALLMENT_NO,
				sdlt.INSTALLMENT_NO s_installment_no,
--				ls.DROP_INSTALLMENT,
--				(CASE WHEN (sdlt.LOAN_PAID+sdlt.INT_PAID)=0 
--					THEN (ls.DROP_INSTALLMENT+1) ELSE ls.DROP_INSTALLMENT END) S_DROP_INSTALLMENT,
--				ls.HOLIDAYS,
--				(CASE WHEN ABS(UTIL.GET_DAY_DIFF(sdlt.INSTALLMENT_DATE,ls.INSTALLMENT_DATE)) > 7 AND 
--				ABS(UTIL.GET_DAY_DIFF(sdlt.INSTALLMENT_DATE,ls.INSTALLMENT_DATE))<15 
--					THEN ls.HOLIDAYS+1 ELSE 0 END) s_holidays,
				ls.INSTALLMENT_DATE,
				sdlt.INSTALLMENT_DATE s_installment_date,
				ls.CUM_LOAN_DUE, 
				(NVL(ls.CUM_LOAN_DUE,0) + NVL(sdlt.LOAN_DUE,0)) s_cum_loan_due,
				ls.CUM_INT_DUE, 
				(NVL(ls.CUM_INT_DUE,0) + NVL(sdlt.INT_DUE,0)) s_cum_int_due,
				ls.CUR_LOAN, 
				(ls.CUR_LOAN + NVL(sdlt.LOAN_PAID,0)) s_cur_loan,
				ls.CUR_INT_PAID, 
				(ls.CUR_INT_PAID + NVL(sdlt.INT_PAID,0)) s_cur_int_paid,
				ls.CUR_INT_CHARGE, 
				(ls.CUR_INT_CHARGE + NVL(sdlt.INT_CHARGE,0)) s_cur_int_charge,
				ls.CUR_LOAN_DUE, 
				(ls.CUR_LOAN_DUE + NVL(sdlt.LOAN_DUE,0)) s_cur_loan_due,
				ls.CUR_INT_DUE, 
				(ls.CUR_INT_DUE + NVL(sdlt.INT_DUE,0)) s_cur_int_due
				
			FROM LOAN_SUMMARY ls 
			INNER JOIN (
				SELECT dlt.LOAN_SUMMARY_ID, dlt.OFFICE_ID,dlt.CENTER_ID,dlt.MEMBER_ID,
				dlt.PRODUCT_ID,dlt.LOAN_TERM,dlt.INSTALLMENT_DATE,
				MAX(dlt.INSTALLMENT_NO) INSTALLMENT_NO, 
				SUM(dlt.LOAN_PAID) LOAN_PAID, SUM(dlt.INT_PAID) INT_PAID,
				SUM(INT_CHARGE) INT_CHARGE,
				SUM(LOAN_DUE) LOAN_DUE,
				SUM(INT_DUE) INT_DUE
				 FROM DAILY_LOAN_TRX dlt WHERE dlt.OFFICE_ID=officeID 
				 	AND dlt.ORGANIZATION_ID=orgID AND dlt.TRX_TYPE <> 41
				 	GROUP BY dlt.OFFICE_ID,dlt.CENTER_ID,dlt.MEMBER_ID,dlt.PRODUCT_ID,
				 		dlt.LOAN_TERM,dlt.INSTALLMENT_DATE,dlt.LOAN_SUMMARY_ID	
			 ) sdlt ON ls.OFFICE_ID=sdlt.OFFICE_ID
				AND ls.CENTER_ID=sdlt.CENTER_ID
				AND ls.MEMBER_ID=sdlt.MEMBER_ID
				AND ls.PRODUCT_ID=sdlt.PRODUCT_ID
				AND ls.LOAN_TERM=sdlt.LOAN_TERM
				AND ls.LOAN_SUMMARY_ID=sdlt.LOAN_SUMMARY_ID
			INNER JOIN PRODUCTS p ON ls.PRODUCT_ID=p.PRODUCT_ID
			WHERE ls.OFFICE_ID=officeID  AND ls.ORGANIZATION_ID=orgID
			AND sdlt.INSTALLMENT_DATE=businessDate) e
			ON (l.LOAN_SUMMARY_ID = e.LOAN_SUMMARY_ID)
			WHEN MATCHED THEN
			UPDATE SET 
				l.LOAN_REPAID=e.S_LOAN_REPAID,
			    l.INT_PAID=e.s_int_paid,
			    l.INT_CHARGE=e.s_int_charge,
			    l.INSTALLMENT_NO=e.s_installment_no,
			    l.INSTALLMENT_DATE=e.s_installment_date,
			    l.CUM_LOAN_DUE=e.s_cum_loan_due,
			    l.CUM_INT_DUE=e.s_cum_int_due,
			    l.CUR_LOAN=e.s_cur_loan,
			    l.CUR_INT_PAID=e.s_cur_int_paid,
			    l.CUR_INT_CHARGE=e.s_cur_int_charge,
			    l.CUR_LOAN_DUE=e.s_cur_loan_due,
			    l.CUR_INT_DUE=e.s_cur_int_due;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);	

END;

PROCEDURE UPDATE_LOAN_CORRECTION(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_LOAN_CORRECTION]:';
BEGIN
	
	MERGE INTO LOAN_SUMMARY l
	USING (SELECT ls.LOAN_SUMMARY_ID, 
			(NVL(ls.LOAN_REPAID,0)+NVL(sdlt.LOAN_PAID,0)) LOAN_PAID,
			(NVL(ls.INT_PAID,0) + NVL(sdlt.INT_PAID,0)) INT_PAID,
			(CASE WHEN p.INTEREST_CALCULATION_METHOD='F' THEN
					ls.INT_CHARGE 
				ELSE ( NVL(ls.INT_CHARGE,0) + NVL(sdlt.INT_CHARGE,0)) 
				END) INT_CHARGE 
				FROM LOAN_SUMMARY ls
			INNER JOIN (
				SELECT dlt.LOAN_SUMMARY_ID,
				SUM(dlt.LOAN_PAID) LOAN_PAID ,SUM(dlt.INT_PAID) INT_PAID,
				SUM(dlt.INT_CHARGE) INT_CHARGE
				 
			 FROM DAILY_LOAN_TRX dlt WHERE dlt.OFFICE_ID=officeID 
			 AND dlt.ORGANIZATION_ID=orgID
			 AND dlt.TRX_TYPE=41 AND dlt.TRX_DATE=businessDate
			 GROUP BY dlt.LOAN_SUMMARY_ID
			 ) sdlt ON ls.LOAN_SUMMARY_ID=sdlt.LOAN_SUMMARY_ID
			 INNER JOIN PRODUCTS p on ls.PRODUCT_ID=p.PRODUCT_ID
			Where ls.OFFICE_ID=officeID  AND ls.ORGANIZATION_ID=orgID) e
			ON (l.LOAN_SUMMARY_ID = e.LOAN_SUMMARY_ID)
			WHEN MATCHED THEN			
			UPDATE SET l.LOAN_REPAID=e.LOAN_PAID,
				l.INT_PAID=e.INT_PAID,
				l.INT_CHARGE=e.INT_CHARGE;
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE INSERT_REGULAR_DISBURSEMENT(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [INSERT_REGULAR_DISBURSEMENT]:';
BEGIN
	
	-- Regular Disbursement
	INSERT INTO LOAN_TRX(TRX_DATE,LOAN_SUMMARY_ID,OFFICE_ID,CENTER_ID,MEMBER_ID,PRODUCT_ID,LOAN_TERM
		,PRINCIPAL_LOAN,INT_CHARGE,TRX_TYPE,INSTALLMENT_NO,ADVANCE,DUE_RECOVERY,MEMBER_CATEGORY_ID,
		EMPLOYEE_ID,INVESTOR_ID,INSTALLMENT_DATE,CREATE_USER,CREATE_DATE,ORGANIZATION_ID,INT_PAID
	)
	SELECT businessDate AS TRX_DATE,ls.LOAN_SUMMARY_ID,ls.OFFICE_ID,
	ls.CENTER_ID, ls.MEMBER_ID,ls.PRODUCT_ID,ls.LOAN_TERM,
	(CASE WHEN ls.DISBURSEMENT_TYPE=2 THEN NVL(ls.PARTIAL_AMOUNT,0) ELSE ls.PRINCIPAL_LOAN END) PRINCIPAL_LOAN,
	(CASE WHEN  DISBURSEMENT_TYPE=2 THEN NVL(PARTIAL_INT_CHARGE,0) ELSE INT_CHARGE END) INT_CHARGE,
	ls.TRANS_TYPE,0 as INSTALLMENT_NO,0 as ADVANCE,0 as  DUE_RECOVERY,ls.MEMBER_CATEGORY_ID,
	ls.EMPLOYEE_ID,ls.INVESTOR_ID,businessDate,ls.CREATE_USER,SYSDATE,
	ls.ORGANIZATION_ID,
	(CASE WHEN DISBURSEMENT_TYPE=2 THEN NVL(PARTIAL_INT_PAID,0) ELSE 0 END) INT_PAID
	FROM LOAN_SUMMARY ls 
	WHERE ls.OFFICE_ID=officeID 
		AND ls.DISBURSE_DATE=businessDate 
		AND ls.ORGANIZATION_ID=orgID;
	
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;


PROCEDURE UPDATE_REGULAR_DISBURSEMENT_DATE(officeID IN NUMBER, orgID IN NUMBER, 
											businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_REGULAR_DISBURSEMENT_DATE]:';
BEGIN
	
	UPDATE LOAN_SUMMARY ls
	SET ls.POSTED=1
	,ls.PRINCIPAL_LOAN=(CASE WHEN ls.DISBURSEMENT_TYPE=2 
		THEN ls.PRINCIPAL_LOAN+NVL(ls.PARTIAL_AMOUNT,0) ELSE ls.PRINCIPAL_LOAN END)
	,ls.INT_CHARGE = (CASE WHEN ls.DISBURSEMENT_TYPE=2 THEN ls.INT_CHARGE + NVL(ls.PARTIAL_INT_CHARGE,0) ELSE ls.INT_CHARGE END)
	,ls.INT_PAID= (CASE WHEN  ls.DISBURSEMENT_TYPE=2 THEN ls.INT_PAID + NVL(ls.PARTIAL_INT_PAID,0) ELSE ls.INT_PAID END) 
	,ls.FINAL_DISBURSEMENT=(CASE WHEN ls.PRINCIPAL_LOAN + NVL(ls.PARTIAL_AMOUNT,0)=NVL(ls.APPROVED_AMOUNT,0) THEN 1 ELSE 0 END)
	,ls.DISBURSE_DATE=(CASE WHEN ls.DISBURSEMENT_TYPE=2 THEN
			 (CASE WHEN ls.FINAL_DISBURSEMENT=1 THEN businessDate ELSE 
			 NULL END) ELSE ls.DISBURSE_DATE END)
			where ls.DISBURSE_DATE	= businessDate  
			AND ls.INSTALLMENT_DATE = businessDate
			And ls.ORGANIZATION_ID=orgID AND ls.OFFICE_ID=officeID AND ls.IS_ACTIVE=1;
		
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;
		
PROCEDURE ADD_SAVING_TRX(officeID IN NUMBER, orgID IN NUMBER)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [ADD_SAVING_TRX]:';
BEGIN
	
	INSERT INTO SAVING_TRX(
	SAVING_SUMMARY_ID,OFFICE_ID,CENTER_ID,
	MEMBER_ID,PRODUCT_ID,NO_OF_ACCOUNT,DEPOSIT,
	PRESENCE_IND,WITHDRAWAL,BALANCE,TRANSACTION_DATE,
	TRANS_TYPE,MEMBER_CATEGORY_ID,EMPLOYEE_ID,PENALTY,
	CREATE_USER,CREATE_DATE,ORGANIZATION_ID,MONTHLY_INTEREST)	
	SELECT dst.SAVING_SUMMARY_ID,dst.OFFICE_ID,dst.CENTER_ID
	,dst.MEMBER_ID,dst.PRODUCT_ID,dst.NO_OF_ACCOUNT,dst.SAVING_INSTALLMENT AS DEPOSIT,
	dst.PRESENCE_IND, dst.WITHDRAWAL,(dst.BALANCE+dst.SAVING_INSTALLMENT-dst.WITHDRAWAL) as BALANCE
	,dst.TRANSACTION_DATE,dst.TRANS_TYPE,dst.MEMBER_CATEGORY_ID,dst.EMPLOYEE_ID,dst.PENALTY,
	dst.CREATE_USER,SYSDATE AS CREATE_DATE,dst.ORGANIZATION_ID,dst.MONTHLY_INTEREST
 	FROM DAILY_SAVING_TRX dst WHERE dst.OFFICE_ID=officeID And ORGANIZATION_ID=orgID;
 
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);
 
END;

PROCEDURE UPDATE_SAVING_SUMMARY_BALANCE(officeID IN NUMBER, orgID IN NUMBER)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_SAVING_SUMMARY_BALANCE]:';
BEGIN
	
	MERGE INTO SAVING_SUMMARY t
		USING (
			SELECT dst.SAVING_SUMMARY_ID, dst.CENTER_ID,dst.OFFICE_ID,
				dst.MEMBER_ID,dst.PRODUCT_ID,dst.NO_OF_ACCOUNT, 
				sum(dst.DEPOSIT) DEPOSIT,
				sum(dst.SAVING_INSTALLMENT) SAVING_INSTALLMENT,
		sum(dst.WITHDRAWAL) WITHDRAWAL,sum(dst.PENALTY) PENALTY,
		sum(dst.MONTHLY_INTEREST) MONTHLY_INTEREST 
			FROM DAILY_SAVING_TRX dst WHERE dst.OFFICE_ID=officeID AND ORGANIZATION_ID=orgID
		GROUP BY  dst.CENTER_ID,dst.OFFICE_ID,dst.MEMBER_ID,dst.PRODUCT_ID,
				dst.NO_OF_ACCOUNT,dst.SAVING_SUMMARY_ID
		) s
		ON (s.SAVING_SUMMARY_ID = t.SAVING_SUMMARY_ID)
		WHEN MATCHED THEN
		UPDATE SET 
			t.DEPOSIT=t.DEPOSIT + s.SAVING_INSTALLMENT ,
			t.WITHDRAWAL=t.WITHDRAWAL+s.WITHDRAWAL,
			t.PENALTY=t.PENALTY+s.PENALTY,
			t.CUM_INTEREST=t.CUM_INTEREST+s.MONTHLY_INTEREST,
			t.CUR_DEPOSIT=t.CUR_DEPOSIT+s.SAVING_INSTALLMENT,
			t.CUR_WITHDRAWAL=t.CUR_WITHDRAWAL+s.WITHDRAWAL,
			t.CUR_INTEREST=t.CUR_INTEREST+s.MONTHLY_INTEREST,
			t.CUR_PENALTY=t.CUR_PENALTY+s.PENALTY;
		
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_LOAN_STATUS(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_LOAN_STATUS]:';
BEGIN
	
	UPDATE LOAN_SUMMARY l
	SET LOAN_STATUS=0,
	LOAN_CLOSE_DATE=businessDate 
	WHERE LOAN_STATUS=1 AND (l.PRINCIPAL_LOAN + l.INT_CHARGE)-(l.LOAN_REPAID+l.INT_PAID+NVL(l.WRITE_OFF_LOAN,0)+NVL(l.WRITE_OFF_INTEREST,0))<0.5
		AND l.OFFICE_ID=officeID AND l.PRINCIPAL_LOAN=l.LOAN_REPAID AND l.ORGANIZATION_ID=orgID;
	
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_LOAN_TRX_DUE(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_LOAN_TRX_DUE]:';
BEGIN
	
	MERGE INTO LOAN_TRX t
	USING (
		SELECT lt.LOAN_TRX_ID,l.LOAN_SUMMARY_ID,lt.LOAN_DUE, lt.INT_DUE
		FROM LOAN_TRX lt INNER JOIN (
		SELECT lr.LOAN_SUMMARY_ID, lr.OFFICE_ID,lr.CENTER_ID,
		lr.PRODUCT_ID,lr.MEMBER_ID,lr.LOAN_TERM
		FROM LOAN_TRX lr 
		INNER JOIN PRODUCTS p ON lr.PRODUCT_ID=p.PRODUCT_ID
		WHERE lr.OFFICE_ID=officeID 
		AND UTIL.GET_MONTH_FROM_DATE(lr.INSTALLMENT_DATE)=UTIL.GET_MONTH_FROM_DATE(businessDate) 
			AND UTIL.GET_YEAR_FROM_DATE(lr.INSTALLMENT_DATE)=UTIL.GET_YEAR_FROM_DATE(businessDate)
		AND lr.INSTALLMENT_DATE <> businessDate
		AND p.PAYMENT_FREQUENCY='M' AND lr.ORGANIZATION_ID=orgID
		GROUP BY lr.LOAN_SUMMARY_ID, lr.OFFICE_ID,lr.CENTER_ID,
				lr.PRODUCT_ID,lr.MEMBER_ID,lr.LOAN_TERM
		HAVING COUNT(*)>0) l ON lt.OFFICE_ID=l.OFFICE_ID
		AND lt.CENTER_ID=l.CENTER_ID
		AND lt.MEMBER_ID=l.MEMBER_ID
		AND lt.LOAN_TERM=l.LOAN_TERM 
		AND lt.LOAN_SUMMARY_ID=l.LOAN_SUMMARY_ID
		WHERE lt.OFFICE_ID=officeID
		AND lt.INSTALLMENT_DATE=businessDate
	) s
	ON (t.LOAN_TRX_ID = s.LOAN_TRX_ID)
	WHEN MATCHED THEN
		UPDATE SET 
			LOAN_DUE=0 ,INT_DUE=0;
			
		
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE ADD_LOAN_TRX_DUE(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [ADD_LOAN_TRX_DUE]:';
BEGIN

	INSERT INTO LOAN_TRX(TRX_DATE,LOAN_SUMMARY_ID,OFFICE_ID,CENTER_ID,MEMBER_ID,
	PRODUCT_ID,LOAN_TERM,LOAN_PAID,LOAN_DUE,INT_DUE,INT_CHARGE,INT_PAID,TRX_TYPE,
	INSTALLMENT_NO,ADVANCE,DUE_RECOVERY,MEMBER_CATEGORY_ID,
	EMPLOYEE_ID,INSTALLMENT_DATE,INVESTOR_ID,CREATE_USER,CREATE_DATE,ORGANIZATION_ID
			)
		SELECT  businessDate TRX_DATE ,ul.LOAN_SUMMARY_ID, ul.OFFICE_ID,
		ul.CENTER_ID,ul.MEMBER_ID,ul.PRODUCT_ID,ul.LOAN_TERM,0 LOAN_PAID,
		(lr.PRINCIPAL_LOAN-lr.DUE_LOAN_INSTALLMENT) LOAN_DUE,
		(lr.INTEREST_CHARGE-lr.DUE_INTEREST_INSTALLMENT) INT_DUE,0 INT_CHARGE,0 INT_PAID,
		52 TRX_TYPE,lr.INSTALLMENT_NO,0 ADVANCE,0 DUE_RECOVERY,ul.MEMBER_CATEGORY_ID,
		ul.EMPLOYEE_ID, businessDate INSTALLMENT_DATE ,ul.INVESTOR_ID,
		ul.CREATE_USER,SYSDATE CREATE_DATE,orgID ORAGNIZATION_ID
		FROM LOAN_SUMMARY ul  
		INNER JOIN (
		SELECT lt.LOAN_SUMMARY_ID, lt.OFFICE_ID,lt.CENTER_ID,lt.MEMBER_ID,lt.PRODUCT_ID,
		lt.LOAN_TERM,sum(lt.PRINCIPAL_LOAN) PRINCIPAL_LOAN,Sum(lt.LOAN_PAID) as LOAN_INSTALLMENT,
		Sum(lt.LOAN_DUE) DUE_LOAN_INSTALLMENT,SUM(lt.INT_DUE) DUE_INTEREST_INSTALLMENT,
		Sum(lt.INT_CHARGE) INTEREST_CHARGE, max(lt.INSTALLMENT_NO) INSTALLMENT_NO
		 FROM LOAN_TRX lt WHERE  lt.OFFICE_ID=officeID AND lt.ORGANIZATION_ID=orgID 
		 	AND  lt.INSTALLMENT_DATE<=businessDate 
		  GROUP BY lt.LOAN_SUMMARY_ID, lt.OFFICE_ID,lt.CENTER_ID,lt.MEMBER_ID,lt.PRODUCT_ID,
		  lt.LOAN_TERM
		 ) lr ON 
		 ul.OFFICE_ID=lr.OFFICE_ID
		 AND ul.CENTER_ID=lr.CENTER_ID
		 AND ul.MEMBER_ID=lr.MEMBER_ID
		 AND ul.PRODUCT_ID=lr.PRODUCT_ID
		 AND ul.LOAN_TERM=lr.LOAN_TERM
		 AND ul.LOAN_SUMMARY_ID=lr.LOAN_SUMMARY_ID
		WHERE ul.OFFICE_ID=officeID AND ul.ORGANIZATION_ID=orgID 
		AND ul.INSTALLMENT_DATE=businessDate
		AND ul.INSTALLMENT_NO=ul.DURATION;
	
		DELETE FROM LOAN_TRX 
		WHERE LOAN_PAID+LOAN_DUE+INT_DUE+INT_CHARGE+INT_PAID=0 
			AND TRX_TYPE IN(52,53) AND OFFICE_ID=officeID AND TRX_DATE=businessDate;
	
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_CENTER_COLLECTION_DATE(officeID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_CENTER_COLLECTION_DATE]:';
holidayExist NUMBER(3):=0;
BEGIN
	
	SELECT COUNT(*) INTO holidayExist FROM HOLIDAYS 
	WHERE OFFICE_ID=officeID AND BUSINESS_DATE=businessDate+14;

	IF (holidayExist>0) THEN

		MERGE INTO CENTERS t
		USING (SELECT c.CENTER_ID, (CASE WHEN p.PAYMENT_FREQUENCY='F' 
											THEN (dlc.INSTALLMENT_DATE+28) 
										WHEN p.PAYMENT_FREQUENCY='W' 
											THEN (dlc.INSTALLMENT_DATE+14) 
										WHEN p.PAYMENT_FREQUENCY='M' 
											THEN (dlc.INSTALLMENT_DATE+60) 
								END) COLLECTION_DATE
		FROM CENTERS c INNER JOIN DAILY_LOAN_TRX dlc ON
		c.OFFICE_ID=dlc.OFFICE_ID
		AND c.CENTER_ID=dlc.CENTER_ID INNER JOIN PRODUCTS p ON
		dlc.PRODUCT_ID=p.PRODUCT_ID
		WHERE dlc.OFFICE_ID=officeID
			AND  c.COLLECTION_DATE=businessDate  
			AND p.PAYMENT_FREQUENCY='F') s
		ON (s.CENTER_ID = t.CENTER_ID)
		WHEN MATCHED THEN
		UPDATE SET t.COLLECTION_DATE = s.COLLECTION_DATE;
				
	ELSE
			
		MERGE INTO CENTERS t
		USING (SELECT c.CENTER_ID, c.COLLECTION_DATE, (CASE when p.PAYMENT_FREQUENCY='F' 
					THEN (dlc.INSTALLMENT_DATE+14) 
					WHEN p.PAYMENT_FREQUENCY='W' THEN (dlc.INSTALLMENT_DATE+7) 
					WHEN p.PAYMENT_FREQUENCY='M' THEN (dlc.INSTALLMENT_DATE+30) 
					END) COLLECTION_DATE_SRC		
		FROM CENTERS c INNER JOIN DAILY_LOAN_TRX dlc ON
		c.OFFICE_ID=dlc.OFFICE_ID
		AND c.CENTER_ID=dlc.CENTER_ID INNER JOIN PRODUCTS p ON dlc.PRODUCT_ID=p.PRODUCT_ID
		WHERE c.COLLECTION_DATE=businessDate   
		AND dlc.OFFICE_ID=officeID  AND p.PAYMENT_FREQUENCY='F'
		) s
		ON (s.CENTER_ID = t.CENTER_ID)
		WHEN MATCHED THEN
		UPDATE SET t.COLLECTION_DATE = s.COLLECTION_DATE_SRC;	
				
	END IF;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_PROCESS_INFO(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_PROCESS_INFO]:';
BEGIN
	
	UPDATE PROCESS_INFO
	SET CLOSING_STATUS=1,
			INITIAL_STATUS=1,
			CLOSING_DATE=businessDate
		WHERE OFFICE_ID=officeID AND ORGANIZATION_ID=orgID 
		AND BUSINESS_DATE=businessDate 
		AND INITIAL_DATE=businessDate;
	
	DELETE FROM REPAYMENT_SCHEDULE WHERE OFFICE_ID=officeID;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);
	
END;

PROCEDURE UPDATE_SAVING_SUMMARY_01_03(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_SAVING_SUMMARY_01_03]:';
BEGIN
	
	MERGE INTO SAVING_SUMMARY t
	USING (SELECT d.SAVING_SUMMARY_ID,d.CENTER_ID,d.OFFICE_ID,d.MEMBER_ID,d.PRODUCT_ID,d.NO_OF_ACCOUNT,
	d.TRANSACTION_DATE
	From SAVING_SUMMARY s 
	INNER JOIN (SELECT dst.SAVING_SUMMARY_ID, dst.CENTER_ID,dst.OFFICE_ID,dst.MEMBER_ID,
	dst.PRODUCT_ID,dst.NO_OF_ACCOUNT, 
	max(TRANSACTION_DATE)TRANSACTION_DATE
	FROM DAILY_SAVING_TRX dst WHERE dst.OFFICE_ID=officeID AND ORGANIZATION_ID=orgID
	GROUP BY  dst.CENTER_ID,dst.OFFICE_ID,dst.MEMBER_ID,dst.PRODUCT_ID,dst.NO_OF_ACCOUNT,
	dst.SAVING_SUMMARY_ID
	HAVING sum(dst.SAVING_INSTALLMENT)>0  
	) d ON d.SAVING_SUMMARY_ID=s.SAVING_SUMMARY_ID		
	WHERE s.IS_ACTIVE=1
	AND s.OFFICE_ID=officeID AND s.ORGANIZATION_ID=orgID) s
	ON (t.SAVING_SUMMARY_ID = s.SAVING_SUMMARY_ID)
	WHEN MATCHED THEN
	UPDATE SET
	t.TRANSACTION_DATE=businessDate;

	ACCOUNTS.AUTO_ACCOUNT_CLOSE(officeID, orgID, businessDate);

	-- Delete Records from Daily Table
	DELETE FROM DAILY_LOAN_TRX WHERE OFFICE_ID=officeID AND ORGANIZATION_ID=orgID;

	DELETE FROM DAILY_SAVING_TRX WHERE OFFICE_ID=officeID AND ORGANIZATION_ID=orgID;

-- DELETE PROCESS_CHECK;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_SAVING_SUMMARY_01_01(officeID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_SAVING_SUMMARY_01_01]:';
BEGIN
	
	MERGE INTO SAVING_SUMMARY t
		USING (
		SELECT s.SAVING_SUMMARY_ID
		FROM SAVING_SUMMARY s
		INNER JOIN MEMBERS m ON s.MEMBER_ID=m.MEMBER_ID
		WHERE s.IS_ACTIVE=1  AND s.OFFICE_ID=officeID 
		AND m.MEMBER_STATUS=2 AND s.SAVING_STATUS=1
		AND (s.DEPOSIT+s.CUM_INTEREST-s.WITHDRAWAL)=0
		) s
		ON (t.SAVING_SUMMARY_ID = s.SAVING_SUMMARY_ID)
		WHEN MATCHED THEN
		UPDATE SET t.SAVING_STATUS=0, t.CLOSING_DATE=businessDate;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_SAVING_SUMMARY_01_02(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_SAVING_SUMMARY_01_02]:';
BEGIN
	
	MERGE INTO SAVING_SUMMARY t
	USING (SELECT s.SAVING_SUMMARY_ID
	FROM SAVING_SUMMARY s 
	WHERE s.OFFICE_ID=officeID AND s.ORGANIZATION_ID=orgID
	AND s.SAVING_STATUS=1
	AND (s.DEPOSIT+s.CUM_INTEREST-s.WITHDRAWAL)=0 AND s.IS_ACTIVE=1 AND s.WITHDRAWAL>0
	AND s.PRODUCT_ID NOT IN (
	SELECT PRODUCT_ID FROM PRODUCTS WHERE SUBSTR(PRODUCT_CODE,0,2)='21'
	)) s
	ON (t.SAVING_SUMMARY_ID = s.SAVING_SUMMARY_ID)
	WHEN MATCHED THEN
	UPDATE SET t.SAVING_STATUS=0, t.CLOSING_DATE=businessDate;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_SAVING_DROP_01_03(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_SAVING_DROP_01_03]:';
BEGIN
	
	MERGE INTO SAVING_SUMMARY t
		USING (SELECT s.SAVING_SUMMARY_ID FROM SAVING_SUMMARY s 
		LEFT JOIN (SELECT l.MEMBER_ID FROM LOAN_SUMMARY l WHERE l.IS_ACTIVE=1 
					AND l.OFFICE_ID=officeID
					AND (l.PRINCIPAL_LOAN+l.INT_CHARGE-l.LOAN_REPAID-l.INT_PAID)>=0.5
					AND l.PRODUCT_ID NOT IN (
						SELECT PRODUCT_ID FROM PRODUCTS WHERE SUBSTR(PRODUCT_CODE,0,1) IN ('7')
					)) l ON s.MEMBER_ID=l.MEMBER_ID
		WHERE s.OFFICE_ID=officeID
		AND s.SAVING_STATUS=1
		AND (s.DEPOSIT+s.CUM_INTEREST-s.WITHDRAWAL)=0 AND s.IS_ACTIVE=1 AND s.WITHDRAWAL>0
		AND l.MEMBER_ID IS NULL) s
		ON (t.SAVING_SUMMARY_ID = s.SAVING_SUMMARY_ID)
		WHEN MATCHED THEN
		UPDATE SET t.SAVING_STATUS=0, t.CLOSING_DATE=businessDate;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_MEMBER_DROP_01_04(officeID IN NUMBER, orgID IN NUMBER, businessDate IN DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_MEMBER_DROP_01_04]:';
BEGIN
	
	MERGE INTO MEMBERS t  
	USING (SELECT m.MEMBER_ID
	FROM MEMBERS m 
	LEFT JOIN (SELECT MEMBER_ID FROM LOAN_SUMMARY WHERE IS_ACTIVE=1 AND POSTED=1 AND LOAN_STATUS=1 
				AND OFFICE_ID=officeID
				UNION ALL
				SELECT MEMBER_ID FROM LOAN_SUMMARY WHERE IS_ACTIVE=1 AND POSTED=1 
				AND (PRINCIPAL_LOAN+INT_CHARGE-LOAN_REPAID-INT_PAID)>=0.5 
				AND OFFICE_ID=officeID
				UNION ALL
				SELECT MEMBER_ID FROM SAVING_SUMMARY WHERE IS_ACTIVE=1 AND SAVING_STATUS=1 
					AND PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM PRODUCTS 
					WHERE SUBSTR(PRODUCT_CODE,0,2)='20')
				AND OFFICE_ID=officeID
				UNION ALL
				SELECT MEMBER_ID FROM SAVING_SUMMARY WHERE IS_ACTIVE=1 
					AND (DEPOSIT+CUM_INTEREST-WITHDRAWAL)>0 
					AND PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM PRODUCTS 
					WHERE SUBSTR(PRODUCT_CODE,0,2)='20')
				AND OFFICE_ID=officeID
				) mm ON m.MEMBER_ID=mm.MEMBER_ID 
	Where m.IS_ACTIVE=1 AND m.MEMBER_STATUS=1
	AND m.OFFICE_ID=officeID
	AND mm.MEMBER_ID is NULL) s
	ON (t.MEMBER_ID = s.MEMBER_ID)
	WHEN MATCHED THEN
	UPDATE SET t.MEMBER_STATUS=2, t.RELEASE_DATE=businessDate;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

PROCEDURE UPDATE_LOAN_SUMMARY2(officeID IN NUMBER, businessDate IN DATE) 
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [UPDATE_LOAN_SUMMARY]:';
firstDate DATE;
BEGIN
	
	firstDate := UTIL.GET_FIRST_DATE(businessDate);

	MERGE INTO LOAN_SUMMARY t
		USING (
		SELECT ls.LOAN_SUMMARY_ID, ls.CUR_LOAN, ls.CUR_INT_PAID, ls.CUR_INT_CHARGE,
		ls.CUR_LOAN_DUE, ls.CUR_INT_DUE
		FROM LOAN_SUMMARY l INNER JOIN (
			SELECT lt.LOAN_SUMMARY_ID, sum(lt.LOAN_PAID) CUR_LOAN,sum(lt.INT_PAID) CUR_INT_PAID,
			sum(lt.INT_CHARGE) CUR_INT_CHARGE,
			sum(lt.LOAN_DUE) CUR_LOAN_DUE,sum(lt.INT_DUE) CUR_INT_DUE
			 FROM 
			LOAN_TRX lt WHERE lt.OFFICE_ID=officeID
			AND lt.INSTALLMENT_DATE>=firstDate
			AND lt.INSTALLMENT_DATE<=businessDate
			GROUP BY LOAN_SUMMARY_ID
		) ls ON l.LOAN_SUMMARY_ID=ls.LOAN_SUMMARY_ID
		WHERE l.OFFICE_ID=officeID
		AND (l.CUR_LOAN<>ls.CUR_LOAN OR l.CUR_INT_PAID<>ls.CUR_INT_PAID
		OR l.CUR_INT_CHARGE<>ls.CUR_INT_CHARGE OR l.CUR_LOAN_DUE<>ls.CUR_LOAN_DUE 
		OR l.CUR_INT_DUE<>ls.CUR_INT_DUE)
		) s
		ON (t.LOAN_SUMMARY_ID = s.LOAN_SUMMARY_ID)
		WHEN MATCHED THEN
		UPDATE SET t.CUR_LOAN=s.CUR_LOAN,t.CUR_INT_PAID=s.CUR_INT_PAID,
		t.CUR_INT_CHARGE=s.CUR_INT_CHARGE,t.CUR_LOAN_DUE=s.CUR_LOAN_DUE,
		t.CUR_INT_DUE=s.CUR_INT_DUE;
	
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);	
	

END;
END DAY_END_PROCESS;