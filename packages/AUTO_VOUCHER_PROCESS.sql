CREATE OR REPLACE PACKAGE MFIDSK.AUTO_VOUCHER_PROCESS
AS
/**
 * Author Himel
 * 2021-01-25
 */
	FUNCTION HAS_DAY_INITIAL(officeID NUMBER, businessDate DATE) RETURN NUMBER;
	FUNCTION HAS_ACC_MASTER_RECORD(officeID NUMBER, orgID NUMBER) RETURN NUMBER;
	FUNCTION HAS_LOAN_SUMMARY_DST_DLT(officeID NUMBER, businessDate DATE) RETURN NUMBER;
	FUNCTION HAS_MISC(officeID NUMBER, businessDate DATE) RETURN NUMBER;
	FUNCTION HAS_MEMBER_WITH_TRANSFER_HISTORY(officeID NUMBER, admissionID NUMBER, businessDate DATE) RETURN NUMBER;
	FUNCTION HAS_LOAN_DISBURSE_ONDATE(officeID NUMBER, businessDate DATE) RETURN NUMBER;
	FUNCTION HAS_LOAN_PAID(officeID NUMBER, orgID NUMBER,
		businessDate DATE,vCH_NO VARCHAR,naration VARCHAR,
		trxInd VARCHAR, vCat VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_PARTIAL_INT_PAID(officeID NUMBER,
	businessDate DATE,trxInd VARCHAR, vCat VARCHAR) RETURN NUMBER;

	FUNCTION HAS_DEPOSIT(officeID NUMBER, orgID NUMBER,vCH_NO VARCHAR,
	naration VARCHAR, businessDate DATE) RETURN NUMBER;

	FUNCTION HAS_WITHDRAWAL(officeID NUMBER, orgID NUMBER,
		businessDate DATE,vCH_NO VARCHAR,naration VARCHAR,
		trxInd VARCHAR, vCat VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_LOAN_DISBURSEMENT(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR, transType VARCHAR)
	RETURN NUMBER;

	PROCEDURE SAVE_ACC_TRX_DETAIL_FROM_TEMP(officeID NUMBER, orgID NUMBER, 
		businessDate DATE, vCH_NO IN OUT VARCHAR);

	
	FUNCTION HAS_DEPOSIT_TO_BANK(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER;

	FUNCTION HAS_BANK_VOUCHER_CONTRA(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER;

	FUNCTION HAS_WITHDRAWAL_FROM_BANK(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER;

	FUNCTION HAS_DISBURSEMENT_FROM_BANK_CONTRA(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER;

	FUNCTION HAS_ADJUSTABLE_PREVIOUS_LOAN(officeID NUMBER, orgID NUMBER,
		businessDate DATE, vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;

	FUNCTION HAS_ADJUSTABLE_LOAN_INSTALLMENT(officeID NUMBER, orgID NUMBER,
		businessDate DATE, vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_ADJUSTABLE_LOAN_INSTALLMENT_LLP(officeID NUMBER, orgID NUMBER,
		businessDate DATE, vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_LLP_WRITEOFF_DECLARATION(officeID NUMBER, orgID NUMBER,
		businessDate DATE, vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_ADJUSTABLE_SC_INSTALLMENT(officeID NUMBER, orgID NUMBER,
		businessDate DATE, vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_ADJUSTABLE_SAVING_INSTALLMENT(officeID NUMBER, orgID NUMBER,
		businessDate DATE, vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_EXCESS_SC_TRANSFER(officeID NUMBER,orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_ADJUSTABLE_SAVING_WITHDRAWAL(officeID NUMBER, orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_SAVINGS_INTEREST_DISTRIBUTION(officeID NUMBER, orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_REBATE_SC(officeID NUMBER, orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER;
	
	FUNCTION HAS_ADJUSTABLE_RISKFUND(officeID NUMBER) RETURN NUMBER;
	

END AUTO_VOUCHER_PROCESS;

CREATE OR REPLACE PACKAGE BODY MFIDSK.AUTO_VOUCHER_PROCESS
AS
/**
 * Author Himel
 * 2021-01-25
 * 
 */
	FUNCTION HAS_DAY_INITIAL(officeID IN NUMBER, businessDate IN DATE) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM PROCESS_INFO 
		WHERE OFFICE_ID=officeID AND INITIAL_DATE=businessDate AND CLOSING_STATUS=0;
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_ACC_MASTER_RECORD(officeID IN NUMBER, orgID IN NUMBER) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM ACC_TRX_MASTER 
		WHERE OFFICE_ID=officeID AND ORGANIZATION_ID=orgID;
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_LOAN_SUMMARY_DST_DLT(officeID IN NUMBER, businessDate IN DATE) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM (SELECT OFFICE_ID,MEMBER_ID,CENTER_ID,
		SUM(LOAN_PAID) LOAN_PAID,SUM(INT_PAID) INT_PAID 
		FROM DAILY_LOAN_TRX 
		WHERE TRX_DATE=businessDate AND OFFICE_ID=officeID 
		GROUP BY OFFICE_ID,MEMBER_ID,CENTER_ID HAVING (SUM(LOAN_PAID)<>0 OR SUM(INT_PAID)<>0)
		UNION ALL
		SELECT OFFICE_ID,MEMBER_ID,CENTER_ID, SUM(SAVING_INSTALLMENT) LOAN_PAID, 
		SUM(WITHDRAWAL) INT_PAID 
		FROM DAILY_SAVING_TRX 
		WHERE OFFICE_ID=officeID AND TRANSACTION_DATE =businessDate
		GROUP BY OFFICE_ID,MEMBER_ID,CENTER_ID 
		HAVING (SUM(SAVING_INSTALLMENT)<>0 OR SUM(WITHDRAWAL)<>0)
		UNION ALL
		SELECT OFFICE_ID,MEMBER_ID,CENTER_ID, SUM(PRINCIPAL_LOAN) LOAN_PAID, 0 INT_PAID 
		FROM LOAN_SUMMARY 
		WHERE OFFICE_ID=officeID AND DISBURSE_DATE =businessDate AND  IS_ACTIVE=1
		GROUP BY OFFICE_ID,MEMBER_ID,CENTER_ID HAVING SUM(PRINCIPAL_LOAN)<>0);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_MISC(officeID IN NUMBER, businessDate IN DATE) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM MISCELLANEOUS m 
		INNER JOIN PRODUCTS p
			ON m.PRODUCT_ID=p.PRODUCT_ID 
		INNER JOIN ACC_CHART a 
			ON p.PRODUCT_CODE=a.ACC_CODE
	 	WHERE m.OFFICE_ID=officeID 
	 	AND m.TRX_DATE=businessDate AND m.IS_ACTIVE=1;
	 
	 	RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_MEMBER_WITH_TRANSFER_HISTORY(officeID IN NUMBER, admissionID IN NUMBER, 
		businessDate IN DATE) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM (
			SELECT m.OFFICE_ID,admissionID as ACC_ID
		FROM MEMBERS m 
		INNER JOIN MEMBER_CATEGORIES mc on m.MEMBER_CATEGORY_ID=mc.MEMBER_CATEGORY_ID 
		LEFT JOIN (
			SELECT TR_MEMBER_ID,TRANSFER_HISTORY_ID FROM TRANSFER_HISTORY WHERE OFFICE_ID=officeID
		) t ON m.MEMBER_ID=t.TR_MEMBER_ID
		WHERE m.JOIN_DATE=businessDate 
			AND m.OFFICE_ID=officeID AND m.IS_ACTIVE=1 AND m.MEMBER_STATUS=1
		AND t.TRANSFER_HISTORY_ID IS NULL);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_LOAN_DISBURSE_ONDATE(officeID IN NUMBER, businessDate IN DATE) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c
		FROM LOAN_SUMMARY 
		WHERE OFFICE_ID=officeID AND DISBURSE_DATE=businessDate 
		AND IS_ACTIVE=1 AND LOAN_STATUS=1 AND POSTED=0;

		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_LOAN_PAID(officeID IN NUMBER, orgID IN NUMBER,
	businessDate IN DATE,vCH_NO IN VARCHAR,naration IN VARCHAR,
	trxInd VARCHAR, vCat VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
			SELECT COUNT(*) INTO c FROM (SELECT officeID,businessDate, vCH_NO, 
			naration,ai.VOUCHER_CATEGORY,null,0,0,1
			FROM DAILY_LOAN_TRX dlt 
			INNER JOIN ACCOUNTING_INTERFACE ai ON dlt.PRODUCT_ID=ai.PRODUCT_ID
			INNER JOIN PRODUCTS p ON dlt.PRODUCT_ID=p.PRODUCT_ID
			WHERE dlt.OFFICE_ID=officeID AND dlt.ORGANIZATION_ID=orgID 
			AND  p.PRODUCT_TYPE IN (1,2,3) AND ai.TRX_IND=trxInd AND ai.VOUCHER_TYPE=vCat
			AND dlt.TRX_TYPE IN(10,20,50,41) 
			GROUP BY dlt.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
			HAVING SUM(NVL(dlt.LOAN_PAID,0)) <> 0);
		
			RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_PARTIAL_INT_PAID(officeID IN NUMBER,
	businessDate IN DATE,trxInd IN VARCHAR, vCat IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM (SELECT SUM(NVL(ls.PARTIAL_INT_PAID,0)) PARTIAL_INT_PAID 
			FROM LOAN_SUMMARY ls 
			INNER JOIN ACCOUNTING_INTERFACE ai ON ls.PRODUCT_ID=ai.PRODUCT_ID
			INNER JOIN PRODUCTS p ON ls.PRODUCT_ID=p.PRODUCT_ID
			INNER JOIN ACC_CHART ac ON ai.ACC_CODE=ac.ACC_CODE
		 	WHERE ls.DISBURSEMENT_TYPE=2 AND ls.OFFICE_ID=officeID 
		 	AND ls.DISBURSE_DATE=businessDate
		 	AND ai.TRX_IND=trxInd And ai.VOUCHER_TYPE=vCat
		 	HAVING SUM(NVL(ls.PARTIAL_INT_PAID,0))<>0);
		 
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_DEPOSIT(officeID IN NUMBER, orgID IN NUMBER,vCH_NO VARCHAR,
	naration VARCHAR, businessDate IN DATE) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (SELECT officeID,businessDate,vCH_NO,naration,
		ai.voucher_category,null,0
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai ON dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p on dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 AND ai.TRX_IND='SD' 
		AND ai.VOUCHER_TYPE='Cr'
		AND dst.TRANS_TYPE IN(10,20,41) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.SAVING_INSTALLMENT,0))+SUM(NVL(dst.PENALTY,0)) <> 0);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	
	END;


	FUNCTION HAS_WITHDRAWAL(officeID NUMBER, orgID NUMBER,
		businessDate DATE,vCH_NO VARCHAR,naration VARCHAR,
		trxInd VARCHAR, vCat VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM(SELECT officeID,businessDate, vCH_NO,naration,
		ai.voucher_category,null,0
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai ON dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p on dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 
		AND ai.TRX_IND=trxInd AND ai.VOUCHER_TYPE=vCat
		AND dst.TRANS_TYPE IN(10,20,41) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.WITHDRAWAL,0)) <> 0);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_LOAN_DISBURSEMENT(officeID IN NUMBER, orgID IN NUMBER,
	businessDate IN DATE,vCH_NO IN VARCHAR,naration IN VARCHAR, transType IN VARCHAR)
	RETURN NUMBER
	IS
	c NUMBER; 
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (
			SELECT officeID OFFICE_ID,businessDate BUSINESS_DATE,vCH_NO VOUCHER_NO,
			naration NARRATION,ai.voucher_category,NULL N,0 T 
	    FROM LOAN_SUMMARY ls 
	    INNER JOIN ACCOUNTING_INTERFACE ai ON ls.PRODUCT_ID=ai.PRODUCT_ID
	    INNER JOIN PRODUCTS p on ls.PRODUCT_ID=p.PRODUCT_ID
	    WHERE ls.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 1 
	    AND ai.TRX_IND='LD' AND ai.VOUCHER_TYPE='DR'
	    AND ls.TRANS_TYPE=transType  AND ls.ORGANIZATION_ID=orgID
	    AND ls.DISBURSE_DATE = businessDate 
	    AND ls.INSTALLMENT_DATE = businessDate
	    AND ls.IS_ACTIVE=1 AND ls.LOAN_STATUS=1 AND ls.POSTED=0 AND ls.DISBURSEMENT_TYPE<>2
  		UNION ALL
	    	SELECT officeID OFFICE_ID,businessDate BUSINESS_DATE, vCH_NO VOUCHER_NO,
	    	naration NARRATION,ai.voucher_category,NULL N,0 T 
	 	FROM LOAN_SUMMARY ls 
	 	INNER JOIN ACCOUNTING_INTERFACE ai on ls.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p on ls.PRODUCT_ID=p.PRODUCT_ID
		WHERE ls.OFFICE_ID=officeID AND p.PRODUCT_TYPE = 1 AND ai.TRX_IND='LD' 
		AND ai.VOUCHER_TYPE='DR' AND ls.TRANS_TYPE=transType  AND ls.ORGANIZATION_ID=orgID
		AND ls.DISBURSE_DATE =businessDate 
		And ls.INSTALLMENT_DATE=businessDate 
		AND ls.IS_ACTIVE=1 AND ls.LOAN_STATUS=1  And ls.DISBURSEMENT_TYPE=2);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
		
	END;

	PROCEDURE SAVE_ACC_TRX_DETAIL_FROM_TEMP(officeID IN NUMBER, orgID IN NUMBER, 
		businessDate IN DATE, vCH_NO IN OUT VARCHAR)
	IS
	vYear NUMBER(4);
	vCount NUMBER(32);
	accTrxMasterID	NUMBER(32):=0;
	BEGIN
		
		vYear := UTIL.GET_YEAR_FROM_DATE(businessDate);
		
		SELECT COUNT(*) INTO vCount FROM TEMP_ACC_TRX_DETAIL;
	
		IF(vCount > 0) THEN
		
			INSERT INTO ACC_TRX_MASTER(ORGANIZATION_ID,OFFICE_ID, TRX_DATE, VOUCHER_NO,
				VOUCHER_DESC, VOUCHER_TYPE, REFERENCE, IS_POSTED, IS_AUTO_VOUCHER)
			VALUES(orgID,officeID,businessDate,vCH_NO,'n/a','CA','n/a',0,1) 
			RETURNING TRX_MASTER_ID INTO accTrxMasterID;
		
			INSERT INTO ACC_TRX_DETAIL(TRX_MASTER_ID, ACC_ID, CREDIT, DEBIT, NARRATION)
			SELECT accTrxMasterID, tatd.ACC_ID, tatd.CREDIT, tatd.DEBIT, tatd.NARRATION 
			FROM TEMP_ACC_TRX_DETAIL tatd WHERE tatd.OFFICE_ID = officeID;
		
			UPDATE ACC_LAST_VOUCHER
			SET  VOUCHER_NO = SUBSTR(vCH_NO,0,LENGTH(vCH_NO)-5+1)||vYear 
			WHERE OFFICE_ID=officeID;
		
			SELECT	VOUCHER_NO INTO vCH_NO FROM ACC_LAST_VOUCHER WHERE OFFICE_ID=officeID;
		
			DELETE FROM  TEMP_ACC_TRX_DETAIL WHERE OFFICE_ID=officeID; 
		
			
		END IF;
	END;

	FUNCTION HAS_DEPOSIT_TO_BANK(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (SELECT officeID OFFICE_ID,businessDate BUSINESS_DATE, 
		vCH_NO VOUCHER_NO, naration NARRATION,
		ai.voucher_category,null,0
		FROM DAILY_SAVING_TRX dst INNER JOIN ACCOUNTING_INTERFACE ai on dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 AND ai.TRX_IND='SD' 
		AND ai.VOUCHER_TYPE='Cr'
		AND dst.TRANS_TYPE  IN(22) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.SAVING_INSTALLMENT,0))<>0);
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_BANK_VOUCHER_CONTRA(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		SELECT COUNT(*) INTO c FROM (SELECT officeID OFFICE_ID,businessDate BUSINESS_DATE, 
		vCH_NO VOUCHER_NO, naration NARRATION,
		ai.voucher_category,null,0
		FROM DAILY_SAVING_TRX dst INNER JOIN ACCOUNTING_INTERFACE ai on dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dst.PRODUCT_ID=p.PRODUCT_ID
		INNER JOIN ACC_CHART ac ON dst.BANK_NAME=ac.ACC_CODE
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 AND ai.TRX_IND='SD' 
		AND ai.VOUCHER_TYPE='Cr'
		AND dst.TRANS_TYPE  IN(22) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.SAVING_INSTALLMENT,0))<>0);
	END;

	FUNCTION HAS_WITHDRAWAL_FROM_BANK(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (
			SELECT officeID,businessDate, vCH_NO,naration,
		ai.VOUCHER_CATEGORY,null,0 
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai ON dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 
		AND ai.TRX_IND='SW' AND ai.VOUCHER_TYPE='Dr'
		AND dst.TRANS_TYPE IN(22) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.WITHDRAWAL,0)) <> 0 );
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
			
	END;

	FUNCTION HAS_DISBURSEMENT_FROM_BANK_CONTRA(officeID NUMBER, orgID NUMBER, businessDate DATE,
	vCH_NO VARCHAR,naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM(
		SELECT officeID,businessDate, vCH_NO,naration,'BA',null,0 
		FROM LOAN_SUMMARY ls 
			INNER JOIN ACCOUNTING_INTERFACE ai ON ls.PRODUCT_ID=ai.PRODUCT_ID
			INNER JOIN PRODUCTS p ON ls.PRODUCT_ID=p.PRODUCT_ID
			WHERE ls.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 1 
				AND ai.TRX_IND='LD' AND ai.VOUCHER_TYPE='Dr'
				AND ls.TRANS_TYPE='102' AND ls.DISBURSE_DATE=businessDate 
				AND ls.INSTALLMENT_DATE=businessDate AND ls.ORGANIZATION_ID=orgID
				AND ls.IS_ACTIVE=1 AND ls.LOAN_STATUS=1 AND ls.POSTED=0 AND DISBURSEMENT_TYPE=1
		UNION ALL
		SELECT officeID,businessDate, vCH_NO,naration,'BA',null,0 
 		FROM LOAN_SUMMARY ls 
 			INNER JOIN ACCOUNTING_INTERFACE ai on ls.PRODUCT_ID=ai.PRODUCT_ID
			INNER JOIN PRODUCTS p ON ls.PRODUCT_ID=p.PRODUCT_ID
			WHERE ls.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 1 
			AND ai.TRX_IND='LD' AND ai.VOUCHER_TYPE='Dr'
			AND ls.TRANS_TYPE='102' AND ls.DISBURSE_DATE=businessDate 
			AND ls.INSTALLMENT_DATE=businessDate AND ls.ORGANIZATION_ID=orgID
			AND ls.IS_ACTIVE=1 AND ls.LOAN_STATUS=1  AND DISBURSEMENT_TYPE=2);
		
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
			
	END;

	FUNCTION HAS_ADJUSTABLE_PREVIOUS_LOAN(officeID IN NUMBER, orgID IN NUMBER,
		businessDate IN DATE, vCH_NO IN VARCHAR, naration IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT (*) INTO c FROM (
		SELECT officeID,businessDate, vCH_NO,naration,'JR',null,0 
 		FROM LOAN_SUMMARY ls 
 		INNER JOIN ACCOUNTING_INTERFACE ai on ls.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p on ls.PRODUCT_ID=p.PRODUCT_ID
		WHERE ls.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 1 
		AND ai.TRX_IND='LD' AND ai.VOUCHER_TYPE='Dr'
		AND ls.TRANS_TYPE='103' AND ls.DISBURSE_DATE=businessDate 
		AND ls.INSTALLMENT_DATE=businessDate And ls.ORGANIZATION_ID=orgID
		AND ls.IS_ACTIVE=1 AND ls.LOAN_STATUS=1 AND ls.POSTED=0);

		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_ADJUSTABLE_LOAN_INSTALLMENT(officeID IN NUMBER, orgID IN NUMBER,
		businessDate IN DATE, vCH_NO IN VARCHAR, naration IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT (*) INTO c FROM (SELECT officeID,businessDate, 
		vCH_NO,naration,'JR',null,0 
		FROM DAILY_LOAN_TRX dlt 
		INNER JOIN ACCOUNTING_INTERFACE ai ON dlt.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dlt.PRODUCT_ID=p.PRODUCT_ID
		WHERE dlt.OFFICE_ID=officeID AND p.PRODUCT_TYPE IN (1,2,3) 
		AND ai.TRX_IND='LR' And ai.VOUCHER_TYPE='Cr'
		AND dlt.TRX_TYPE IN(11,21,31) And dlt.ORGANIZATION_ID=orgID
		GROUP BY dlt.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dlt.LOAN_PAID,0)) <> 0);
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	END;

	FUNCTION HAS_ADJUSTABLE_LOAN_INSTALLMENT_LLP(officeID IN NUMBER, orgID IN NUMBER,
		businessDate IN DATE, vCH_NO IN VARCHAR, naration IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT (*) INTO c FROM (
			SELECT officeID,businessDate, vCH_NO,naration,'JR',null,0
			FROM DAILY_LOAN_TRX dlt 
			INNER JOIN ACCOUNTING_INTERFACE ai on dlt.PRODUCT_ID=ai.PRODUCT_ID
			INNER JOIN PRODUCTS p on dlt.PRODUCT_ID=p.PRODUCT_ID
			WHERE dlt.OFFICE_ID=officeID  AND p.PRODUCT_TYPE IN (1,2,3) 
			AND ai.TRX_IND='LR' AND ai.VOUCHER_TYPE='Cr'
			AND dlt.TRX_TYPE in(71) AND dlt.ORGANIZATION_ID=orgID
			GROUP BY dlt.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
			HAVING SUM(NVL(dlt.LOAN_PAID,0)) <> 0 
		);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
		
	END;

	FUNCTION HAS_LLP_WRITEOFF_DECLARATION(officeID IN NUMBER, orgID IN NUMBER,
		businessDate IN DATE, vCH_NO IN VARCHAR, naration IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (
			SELECT officeID,businessDate, vCH_NO,naration,'JR',null,0,
			SUM(NVL(dlt.LOAN_PAID,0)) 
			FROM DAILY_LOAN_TRX dlt 
			INNER JOIN PRODUCTS p ON dlt.PRODUCT_ID=p.PRODUCT_ID
			WHERE dlt.OFFICE_ID=officeID AND p.PRODUCT_TYPE = 1
			AND dlt.TRX_TYPE IN(71) AND dlt.ORGANIZATION_ID=orgID
			GROUP BY dlt.OFFICE_ID
			HAVING SUM(NVL(dlt.LOAN_PAID,0)) <> 0
		);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
		
	END;

	FUNCTION HAS_ADJUSTABLE_SC_INSTALLMENT(officeID IN NUMBER, orgID IN NUMBER,
		businessDate IN DATE, vCH_NO IN VARCHAR, naration IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (SELECT officeID,businessDate, 
		vCH_NO,naration,'JR',null,0 
		FROM DAILY_LOAN_TRX dlt 
		INNER JOIN ACCOUNTING_INTERFACE ai on dlt.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dlt.PRODUCT_ID=p.PRODUCT_ID
		WHERE dlt.OFFICE_ID=officeID AND p.PRODUCT_TYPE IN (1,2,3) 
		AND ai.TRX_IND='SR' AND ai.VOUCHER_TYPE='Cr'
		AND dlt.TRX_TYPE in(11,21)  AND dlt.ORGANIZATION_ID=orgID
		GROUP BY dlt.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dlt.INT_PAID,0)) <> 0); 
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	
	END;

	FUNCTION HAS_ADJUSTABLE_SAVING_INSTALLMENT(officeID IN NUMBER, orgID IN NUMBER,
		businessDate IN DATE, vCH_NO IN VARCHAR, naration IN VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (
		SELECT officeID,businessDate, vCH_NO,naration,'JR',null,0 
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai on dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 
		AND ai.TRX_IND='SD' AND ai.VOUCHER_TYPE='Cr'
		AND dst.TRANS_TYPE IN(11,21,71,23) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.SAVING_INSTALLMENT,0))+SUM(NVL(dst.PENALTY,0)) +SUM(NVL(dst.MONTHLY_INTEREST,0))<> 0); 
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	
	END;

	FUNCTION HAS_EXCESS_SC_TRANSFER(officeID NUMBER,orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (
			SELECT officeID,businessDate,vCH_NO,naration,'JR',null,0
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai 
			ON dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p 
			ON dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 
		AND ai.TRX_IND='SD' AND ai.VOUCHER_TYPE='Cr'
		AND dst.TRANS_TYPE IN(32) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.SAVING_INSTALLMENT,0))+SUM(NVL(dst.PENALTY,0))+SUM(NVL(dst.MONTHLY_INTEREST,0))<> 0 
		);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
	
	END;

	FUNCTION HAS_ADJUSTABLE_SAVING_WITHDRAWAL(officeID IN NUMBER, orgID IN NUMBER,
		businessDate DATE,vCH_NO IN VARCHAR, naration IN VARCHAR ) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM(SELECT officeID,businessDate, vCH_NO,naration,
		'JR',null,0
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai ON dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p on dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID  AND p.PRODUCT_TYPE = 0 
		AND ai.TRX_IND='SW' AND ai.VOUCHER_TYPE='Dr'
		AND dst.TRANS_TYPE IN(11,21,71) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.WITHDRAWAL,0)) <> 0);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;

	END;

	FUNCTION HAS_SAVINGS_INTEREST_DISTRIBUTION(officeID NUMBER, orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM(SELECT officeID,businessDate, vCH_NO,naration,'JR',null,0
		FROM DAILY_SAVING_TRX dst 
		INNER JOIN ACCOUNTING_INTERFACE ai on dst.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p ON dst.PRODUCT_ID=p.PRODUCT_ID
		WHERE dst.OFFICE_ID=officeID AND p.PRODUCT_TYPE = 0 
		AND ai.TRX_IND='GS' AND ai.VOUCHER_TYPE='Cr'
		AND dst.TRANS_TYPE IN(21,23) AND dst.ORGANIZATION_ID=orgID
		GROUP BY dst.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dst.MONTHLY_INTEREST,0)) <> 0);
	
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;

	END;

	FUNCTION HAS_REBATE_SC(officeID NUMBER, orgID NUMBER,businessDate DATE,
		vCH_NO VARCHAR, naration VARCHAR) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (
			SELECT officeID,businessDate, vCH_NO,naration,'JR',null,0 
		FROM DAILY_LOAN_TRX dlt 
		INNER JOIN ACCOUNTING_INTERFACE ai ON dlt.PRODUCT_ID=ai.PRODUCT_ID
		INNER JOIN PRODUCTS p on dlt.PRODUCT_ID=p.PRODUCT_ID
		WHERE dlt.OFFICE_ID=officeID AND p.PRODUCT_TYPE IN (1,2,3) 
		AND ai.TRX_IND='SR' AND ai.VOUCHER_TYPE='Cr'
		AND dlt.TRX_TYPE IN(31,71)  AND dlt.ORGANIZATION_ID=orgID
		GROUP BY dlt.OFFICE_ID, ai.VOUCHER_CATEGORY,ai.ACC_CODE
		HAVING SUM(NVL(dlt.INT_PAID,0)) <> 0);
		
		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;

	END;

	FUNCTION HAS_ADJUSTABLE_RISKFUND(officeID NUMBER) RETURN NUMBER
	IS
	c NUMBER;
	BEGIN
		
		SELECT COUNT(*) INTO c FROM (SELECT d.LOAN_PAID 
			FROM DAILY_LOAN_TRX d 
			INNER JOIN EXPIRE_INFOS e ON d.OFFICE_ID=e.OFFICE_ID
 						AND d.MEMBER_ID=e.MEMBER_ID 
 			WHERE d.OFFICE_ID=officeID AND d.LOAN_PAID > 0 AND d.TRX_TYPE=21);
 		
 		RETURN CASE WHEN(c>0) THEN 1 ELSE 0 END;
 	
	END;
END AUTO_VOUCHER_PROCESS;