CREATE OR REPLACE PACKAGE MFIDSK.ACCOUNTS
AS
   PROCEDURE UPDATE_AUTO_VOUCHER(officeID NUMBER);
   PROCEDURE ACCOUNT_DAY_CLOSE(officeID NUMBER, orgID NUMBER, businessDate DATE);
   PROCEDURE ACCOUNT_CLOSE(
   			office_id NUMBER,
			member_id NUMBER,
			center_id NUMBER,
			no_of_account NUMBER,
			saving_summary_id NUMBER,
			transaction_date DATE);
   PROCEDURE AUTO_ACCOUNT_CLOSE(officeID NUMBER,orgID NUMBER, businessDate DATE);
END ACCOUNTS;

CREATE OR REPLACE PACKAGE BODY MFIDSK.ACCOUNTS
AS
/**
 * Update Auto Voucher
 * Author Himel
 * CALLED in DAY_INITIAL
 */
PROCEDURE UPDATE_AUTO_VOUCHER(officeID IN NUMBER) 
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [DELETE_VOUCHER]:';
hasAutoVoucher NUMBER(1) := 0;
BEGIN
	SELECT COUNT(*) INTO hasAutoVoucher FROM AUTO_VOUCHER_CHECK 
	WHERE OFFICE_ID=officeID and CHECK_AUTO_VOUCHER=1;
	
	IF(HASAUTOVOUCHER>0) THEN
		UPDATE AUTO_VOUCHER_CHECK
		SET CHECK_AUTO_VOUCHER=0 WHERE  OFFICE_ID=officeID;
	ELSE
		INSERT INTO AUTO_VOUCHER_CHECK(OFFICE_ID, CHECK_AUTO_VOUCHER)
		VALUES(officeID,0);
	END IF;

EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);

END;

/**
 * Account Day close
 * Author Himel
 */
PROCEDURE ACCOUNT_DAY_CLOSE(officeID NUMBER, orgID NUMBER, businessDate DATE)
IS
ex EXCEPTION;
PRAGMA exception_init(ex,-20001);
spName VARCHAR(80) := SYSDATE || ' [ACCOUNT_DAY_CLOSE]:';
yearStartDate DATE;
accCode VARCHAR(10):='';
accID NUMBER(19);
creditSum NUMBER(32);
debitSum NUMBER(32);
vYear NUMBER(4);
accMasTerId NUMBER(32);
accVoucherNO VARCHAR(50):='';
BEGIN
	
	DELETE FROM TMP_LEDGER WHERE OFFICE_ID=officeID;

	SELECT (YEAR_CLOSING_DATE+1),CASH_BOOK INTO yearStartDate,accCode FROM APPLICATION_SETTINGS
		WHERE OFFICE_ID=officeID AND ORGANIZATION_ID=orgID;

	SELECT ACC_ID INTO accID FROM ACC_CHART 
	WHERE ACC_CODE=accCode AND IS_ACTIVE=1 AND ORGANIZATION_ID=orgID;
	
	SELECT UTIL.GET_YEAR_FROM_DATE(businessDate) INTO vYear FROM DUAL;

	SELECT VOUCHER_NO INTO accVoucherNO FROM  ACC_LAST_VOUCHER WHERE OFFICE_ID=officeID;

	UPDATE ACC_LAST_VOUCHER
		SET		
		VOUCHER_NO=(SUBSTR(accVoucherNO,1,INSTR(accVoucherNO,'-')-1)|| '-' || vYear) 
		WHERE OFFICE_ID=officeID;

	INSERT INTO TMP_LEDGER(TRANSACTION_DATE, VOUCHER_NO, NARATION, 
			OFFICE_ID, ACC_ID, RECON_PURPOSE_CODE,
			REFERENCE, DEBIT, CREDIT, VOUCHER_TYPE)
		SELECT atm.TRX_DATE TRANSACTION_DATE,atm.VOUCHER_NO,atd.NARRATION NARATION,
		officeID OFFICE_ID,atd.ACC_ID, '' RECON_PURPOSE_CODE,
		'' REFERENCE,atd.DEBIT,atd.CREDIT,atm.VOUCHER_TYPE
		FROM ACC_TRX_MASTER atm 
		INNER JOIN ACC_TRX_DETAIL atd ON atm.TRX_MASTER_ID=atd.TRX_MASTER_ID 
		INNER JOIN ACC_CHART ac ON atd.ACC_ID=ac.ACC_ID
		WHERE atm.OFFICE_ID=officeID 
		AND atm.IS_ACTIVE=1 AND atm.TRX_DATE=businessDate
		AND atd.IS_ACTIVE=1;
	
		SELECT Sum(t.Debit),Sum(t.Credit) INTO creditSum,debitSum
		     FROM TMP_LEDGER t WHERE t.OFFICE_ID=officeID 
		     	AND t.VOUCHER_TYPE='CA' AND t.ACC_ID<>accID;
		    
		IF (debitSum)>0 THEN
		
			INSERT INTO ACC_TRX_MASTER(OFFICE_ID, TRX_DATE, VOUCHER_NO, VOUCHER_DESC,
			VOUCHER_TYPE, REFERENCE, 
			IS_POSTED, IS_ACTIVE,ORGANIZATION_ID)
			VALUES(officeID,businessDate,accVoucherNO,'N/A','Dr','N/A',
			0,1,orgID) 
			RETURNING TRX_MASTER_ID 
			INTO  accMasTerId;	
	
			
			INSERT INTO ACC_TRX_DETAIL(TRX_MASTER_ID, ACC_ID, DEBIT, NARRATION, IS_ACTIVE)
			--Values(@AccMasTerId,@accid,(@CreditSum-@DebitSum),'N/A',1)
			VALUES(accMasTerId,accID,(debitSum),'N/A',1); 
			
		END IF;

		IF (creditSum)>0 THEN
			INSERT INTO ACC_TRX_MASTER(OFFICE_ID, TRX_DATE, VOUCHER_NO, 
				VOUCHER_DESC, VOUCHER_TYPE, REFERENCE, IS_POSTED, IS_ACTIVE,ORGANIZATION_ID)
				Values(officeID,businessDate,accVoucherNO,'N/A','Cr','N/A',0,1,orgID)
				RETURNING TRX_MASTER_ID 
				INTO  accMasTerId;
				
			INSERT INTO ACC_TRX_DETAIL(TRX_MASTER_ID, ACC_ID, DEBIT, NARRATION, IS_ACTIVE)
				VALUES(accMasTerId,accID,(creditSum),'N/A',1);
		END IF;
		
	UPDATE ACC_TRX_MASTER
		SET IS_POSTED=1 WHERE OFFICE_ID=officeID AND TRX_DATE=businessDate;
	
EXCEPTION
	WHEN OTHERS THEN
	WRITE_LOG(spName || SQLERRM);
	raise_application_error(-20001,spName || SQLERRM);
	
END;

PROCEDURE ACCOUNT_CLOSE(
   			officeID NUMBER,
			memberID NUMBER,
			centerID NUMBER,
			noOfAccount NUMBER,
			savingSummaryID NUMBER,
			transactionDate DATE) 
IS
trxDate DATE;
hasLoan NUMBER(1);
hasLoanSummary NUMBER(1);
vMainProductCode VARCHAR(50):='';
BEGIN
	SELECT MAX(BUSINESS_DATE) INTO trxDate FROM PROCESS_INFO WHERE OFFICE_ID=officeID;

	SELECT COUNT(*) INTO hasLoan FROM DAILY_LOAN_TRX WHERE OFFICE_ID=officeID 
			AND CENTER_ID=centerID 
			AND MEMBER_ID=memberID
			AND PRODUCT_ID=productID AND NO_OF_ACCOUNT=noOfAccount;

	IF (hasLoan = 0) THEN

		SELECT MAIN_PRODUCT_CODE INTO vMainProductCode FROM PRODUCTS WHERE PRODUCT_ID=productID;

		SELECT COUNT(*) INTO hasLoanSummary FROM (SELECT l.OFFICE_ID,l.CENTER_ID,l.MEMBER_ID,
		SUM(NVL(l.PRINCIPAL_LOAN,0)+NVL(l.INT_CHARGE,0))-SUM(
			NVL(l.LOAN_REPAID,0) +
			NVL(l.INT_PAID,0) + 
			NVL(d.LOAN_PAID,0) + 
			NVL(d.INT_PAID,0)
		) 
		FROM LOAN_SUMMARY l 
		LEFT JOIN DAILY_LOAN_TRX d ON l.OFFICE_ID=d.OFFICE_ID 
		and l.CENTER_ID=d.CENTER_ID 
		and l.MEMBER_ID=d.MEMBER_ID 
		and l.PRODUCT_ID=d.PRODUCT_ID 
		and l.LOAN_TERM=d.LOAN_TERM
		WHERE l.IS_ACTIVE=1 AND l.OFFICE_ID=officeID AND l.CENTER_ID=centerID 
		AND l.MEMBER_ID=memberID AND l.ORGANIZATION_ID=orgID
		GROUP BY l.OFFICE_ID,l.CENTER_ID,l.MEMBER_ID) r;

		IF (hasLoanSummary = 0) THEN

				SELECT COUNT(*) INTO hasLoanSummary FROM (
					SELECT  ((NVL(s.DEPOSIT,0)+NVL(d.SAVING_INSTALLMENT,0)+
					NVL(s.CUM_INTEREST,0))-(NVL(s.WITHDRAWAL,0)+NVL(d.WITHDRAWAL,0))) 
					FROM SAVING_SUMMARY s
					LEFT JOIN (
							SELECT dst.OFFICE_ID,dst.CENTER_ID,dst.MEMBER_ID,dst.NO_OF_ACCOUNT,dst.PRODUCT_ID, 
							sum(dst.SAVING_INSTALLMENT) SAVING_INSTALLMENT,sum(dst.WITHDRAWAL) WITHDRAWAL 
							FROM DAILY_SAVING_TRX dst 
							WHERE dst.OFFICE_ID=officeID 
							And dst.CENTER_ID=centerID 
							And dst.MEMBER_ID=memberID 
							And dst.PRODUCT_ID=productID 
							And dst.ORGANIZATION_ID=orgID 
							And dst.NO_OF_ACCOUNT=noOfAccount 
							GROUP BY dst.OFFICE_ID,dst.CENTER_ID,dst.MEMBER_ID,dst.NO_OF_ACCOUNT,dst.PRODUCT_ID
					) d on s.OFFICE_ID=d.OFFICE_ID 
				and s.CENTER_ID=d.CENTER_ID 
				and s.MEMBER_ID=d.MEMBER_ID 
				and s.PRODUCT_ID=d.PRODUCT_ID 
				and s.NO_OF_ACCOUNT=d.NO_OF_ACCOUNT
				Where s.OFFICE_ID=officeID 
					AND s.CENTER_ID=centerID 
					AND s.MEMBER_ID=memberID 
					AND s.PRODUCT_ID=productID 
					AND s.ORGANIZATION_ID=orgID 
					AND s.NO_OF_ACCOUNT=noOfAccount
					And s.IS_ACTIVE=1
					And ((NVL(s.DEPOSIT,0)+NVL(d.SAVING_INSTALLMENT,0)+
						NVL(s.CUM_INTEREST,0))-(NVL(s.WITHDRAWAL,0)+NVL(d.WITHDRAWAL,0))) <=0
				) ds;

			IF(hasLoanSummary >0) THEN
				IF(SUBSTR(vMainProductCode,0,2) = '21')

					SELECT COUNT(*) INTO hasSavingSummary FROM  SAVING_SUMMARY s 
					INNER JOIN PRODUCTS p on s.PRODUCT_ID=p.PRODUCT_ID 
					WHERE SUBSTR(p.MAIN_PRODUCT_CODE,0,2)<>'21' and s.SAVING_STATUS=1
							AND s.OFFICE_ID=officeID AND s.CENTER_ID=centerID AND s.MEMBER_ID=memberID AND s.IS_ACTIVE=1;

							IF(hasSavingSummary = 0) THEN
								UPDATE SAVING_SUMMARY SET SAVING_STATUS=0,CLOSING_DATE=trxDate, 
								TRANSACTION_DATE=trxDate 
								Where ORGANIZATION_ID=orgID AND  OFFICE_ID=officeID 
								AND CENTER_ID=centerID AND MEMBER_ID=memberID 
								AND PRODUCT_ID=productID AND NO_OF_ACCOUNT=noOfAccount;
							END IF;

				ELSE
					UPDATE SAVING_SUMMARY SET SAVING_STATUS=0,CLOSING_DATE=trxDate, 
					TRANSACTION_DATE=trxDate 
					Where ORGANIZATION_ID=orgID AND  OFFICE_ID=officeID 
					AND CENTER_ID=centerID AND MEMBER_ID=memberID 
					AND PRODUCT_ID=productID AND NO_OF_ACCOUNT=noOfAccount;

				END IF;
			END IF;
		ELSE

		END IF;

	END IF;


END;

PROCEDURE AUTO_ACCOUNT_CLOSE(officeID NUMBER,orgID NUMBER, businessDate DATE)
IS
CURSOR cur IS
		SELECT s.OFFICE_ID,s.CENTER_ID,s.MEMBER_ID,s.NO_OF_ACCOUNT,
--		,,s.PRODUCT_ID,,
		s.SAVING_SUMMARY_ID,d.TRANSACTION_DATE
		FROM SAVING_SUMMARY s 
		INNER JOIN (SELECT dst.TRANSACTION_DATE,dst.SAVING_SUMMARY_ID,
			SUM(dst.SAVING_INSTALLMENT) SAVING_INSTALLMENT,
			SUM(dst.WITHDRAWAL) WITHDRAWAL,
			SUM(dst.MONTHLY_INTEREST) MONTHLY_INTEREST
			FROM DAILY_SAVING_TRX dst
			WHERE dst.OFFICE_ID=officeID AND dst.ORGANIZATION_ID=orgID
			GROUP BY SAVING_SUMMARY_ID,TRANSACTION_DATE 
			HAVING SUM(dst.WITHDRAWAL)>0) d ON s.SAVING_SUMMARY_ID=d.SAVING_SUMMARY_ID
		Where (s.DEPOSIT+s.CUM_INTEREST-s.WITHDRAWAL+s.PENALTY)=0 
		AND s.OFFICE_ID=officeID AND s.ORGANIZATION_ID=orgID
		AND s.SAVING_STATUS=1;
	
		TYPE Account IS RECORD (
			office_id NUMBER(22),
			center_id NUMBER(19),
			member_id NUMBER(32),
			no_of_account NUMBER(10),
			saving_summary_id NUMBER(32),
			transaction_date DATE
		);
		TYPE records IS TABLE OF Account INDEX BY BINARY_INTEGER;
		v_records records;
BEGIN
	
	OPEN cur;
	
	FETCH cur BULK COLLECT INTO v_records;

	IF(v_records.COUNT>0) THEN
		FOR i IN 1..v_records.COUNT LOOP
			ACCOUNTS.ACCOUNT_CLOSE(
				v_records(i).office_id,
				v_records(i).member_id,
				v_records(i).center_id,
				v_records(i).no_of_account,
				v_records(i).saving_summary_id,
				v_records(i).transaction_date
			);
		END LOOP;
	END IF;

	CLOSE cur;

END;
END ACCOUNTS;